[INFO ] 2019-03-12T14:13:33,024Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-13cad7e3-304c-4b06-bb99-957dbaff5a84.jar {}
[INFO ] 2019-03-12T14:13:33,062Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-8014e3fe-ad7c-48e9-ac63-d71998e8eca4.jar {}
[INFO ] 2019-03-12T14:13:33,112Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-13cad7e3-304c-4b06-bb99-957dbaff5a84.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8014e3fe-ad7c-48e9-ac63-d71998e8eca4.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:13:33,147Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:13:33,151Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:13:33,164Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-13cad7e3-304c-4b06-bb99-957dbaff5a84.jar {}
[INFO ] 2019-03-12T14:13:33,195Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8014e3fe-ad7c-48e9-ac63-d71998e8eca4.jar {}
[INFO ] 2019-03-12T14:13:33,326Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7bf997e0 {}
[INFO ] 2019-03-12T14:13:34,003Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:13:34,048Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:13:34,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:13:36,083Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:13:36,598Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:13:36,601Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:36,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:36,719Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:36,722Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:36,890Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5ED7DEEACE469720F819E77705A108601A588E5291D05211DFD87CC7E6DBAD94 {}
[WARN ] 2019-03-12T14:13:36,896Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:13:36,989Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:13:37,113Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:13:37,125Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:13:37,177Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 108E30724D359C2F52F757D61C237F5339B45BDE36CEADC5E322BA447AA7A383, not inserting the second time {}
[INFO ] 2019-03-12T14:13:37,239Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,260Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,262Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,263Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,265Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,268Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,273Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:13:37,274Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:13:37,292Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:13:37,301Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@393489c3 {}
[INFO ] 2019-03-12T14:13:37,311Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:13:37,312Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,314Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,442Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,452Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:13:37,454Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,458Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,464Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,466Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,525Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5ED7DEEACE469720F819E77705A108601A588E5291D05211DFD87CC7E6DBAD94 {}
[WARN ] 2019-03-12T14:13:37,527Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:13:37,540Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:13:37,542Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:13:37,553Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 04DB85DCC04DF9435E63F34EB1BC0B19D90AAA75E80456E0E376B6B68AC46A1E, not inserting the second time {}
[INFO ] 2019-03-12T14:13:37,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,568Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,581Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,583Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,587Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,609Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,611Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,613Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,614Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,617Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,621Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:13:37,622Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:13:37,642Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:13:37,652Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3e3578e9 {}
[INFO ] 2019-03-12T14:13:37,663Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:13:37,666Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,668Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,775Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:13:37,787Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:13:37,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,793Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,800Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,801Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,862Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5ED7DEEACE469720F819E77705A108601A588E5291D05211DFD87CC7E6DBAD94 {}
[WARN ] 2019-03-12T14:13:37,864Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:13:37,875Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:13:37,877Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:13:37,888Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6A79B3D6F02E3F61DD0CEE3096B46C32DC9586B66D20F519A77A96DFAE45BFB9, not inserting the second time {}
[INFO ] 2019-03-12T14:13:37,896Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,898Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,908Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400016601) {}
[INFO ] 2019-03-12T14:13:37,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,912Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,921Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,922Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,932Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400017453) {}
[INFO ] 2019-03-12T14:13:37,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,936Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:13:37,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,945Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,949Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,951Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,952Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:37,953Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:13:37,955Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400017788) {}
[INFO ] 2019-03-12T14:13:38,381Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:13:38,569Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:13:38,633Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1448710079678000213). {}
[INFO ] 2019-03-12T14:13:38,702Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].call - Started sending message hey {}
[INFO ] 2019-03-12T14:13:38,732Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:13:38,745Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8606226375737446973). {}
[INFO ] 2019-03-12T14:13:38,723Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1448710079678000213). {invocation_id=ca972b56-f581-4ab1-b464-d5fe4293530d, invocation_timestamp=2019-03-12T14:13:38.716Z, session_id=ca972b56-f581-4ab1-b464-d5fe4293530d, session_timestamp=2019-03-12T14:13:38.716Z}
[INFO ] 2019-03-12T14:13:38,753Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:13:38,784Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:13:38,784Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8606226375737446973). {invocation_id=027daac7-6383-4fc9-90d1-165edd955413, invocation_timestamp=2019-03-12T14:13:38.783Z, session_id=027daac7-6383-4fc9-90d1-165edd955413, session_timestamp=2019-03-12T14:13:38.783Z}
[INFO ] 2019-03-12T14:13:38,790Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-344102546612597244). {}
[INFO ] 2019-03-12T14:13:38,797Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].call - Started sending message hey {}
[INFO ] 2019-03-12T14:13:38,821Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:13:38,829Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6639023255337594076). {}
[INFO ] 2019-03-12T14:13:38,841Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-344102546612597244). {invocation_id=93626541-0de8-4030-b844-b01b56342093, invocation_timestamp=2019-03-12T14:13:38.840Z, session_id=93626541-0de8-4030-b844-b01b56342093, session_timestamp=2019-03-12T14:13:38.840Z}
[INFO ] 2019-03-12T14:13:38,862Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6639023255337594076). {invocation_id=88ae384f-aa86-4cf6-b59e-38c741a11b4f, invocation_timestamp=2019-03-12T14:13:38.861Z, session_id=88ae384f-aa86-4cf6-b59e-38c741a11b4f, session_timestamp=2019-03-12T14:13:38.861Z}
[INFO ] 2019-03-12T14:13:38,965Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:13:39,013Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1017933586907649005). {}
[INFO ] 2019-03-12T14:13:39,030Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1017933586907649005). {invocation_id=b9b4f5ca-6ed4-43d3-8de8-8b43cfc1f015, invocation_timestamp=2019-03-12T14:13:39.029Z, session_id=b9b4f5ca-6ed4-43d3-8de8-8b43cfc1f015, session_timestamp=2019-03-12T14:13:39.029Z}
[INFO ] 2019-03-12T14:13:39,030Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:13:39,039Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3372517293125994006). {}
[INFO ] 2019-03-12T14:13:39,054Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3372517293125994006). {invocation_id=04ba098d-c47b-4627-8424-e56071f2746a, invocation_timestamp=2019-03-12T14:13:39.053Z, session_id=04ba098d-c47b-4627-8424-e56071f2746a, session_timestamp=2019-03-12T14:13:39.053Z}
[INFO ] 2019-03-12T14:13:39,076Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:13:39,087Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5887205250122746654). {}
[INFO ] 2019-03-12T14:13:39,095Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5887205250122746654). {invocation_id=0965943b-5035-4005-87c4-61fc6fa64291, invocation_timestamp=2019-03-12T14:13:39.094Z, session_id=0965943b-5035-4005-87c4-61fc6fa64291, session_timestamp=2019-03-12T14:13:39.094Z}
[INFO ] 2019-03-12T14:13:39,127Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:13:39,139Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=826827261005984596). {}
[INFO ] 2019-03-12T14:13:39,148Z [Mock node 1 thread] flow.[8931d1c5-5786-48af-b982-d513fe901a95].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:13:39,148Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=826827261005984596). {invocation_id=a0e81a12-16ca-4a5d-bafc-efd7d1b4fa21, invocation_timestamp=2019-03-12T14:13:39.147Z, session_id=a0e81a12-16ca-4a5d-bafc-efd7d1b4fa21, session_timestamp=2019-03-12T14:13:39.147Z}
[INFO ] 2019-03-12T14:13:39,156Z [Mock node 1 thread] flow.[270f830b-73f0-4518-a9e3-647a3c59e51c].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:13:39,173Z [Mock node 1 thread] flow.[08cd6574-b65f-4ee1-9dbe-e989fcdcf773].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:13:39,177Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:13:39,178Z [Mock node 1 thread] flow.[0b90c75c-b015-4539-966f-e70313c80f23].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:13:39,184Z [Mock node 2 thread] flow.[8c506176-8386-47d1-962a-ecd2b793887b].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T14:13:39,201Z [Mock node 2 thread] flow.[8c506176-8386-47d1-962a-ecd2b793887b].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T14:13:39,205Z [Mock node 2 thread] flow.[8c506176-8386-47d1-962a-ecd2b793887b].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6811258690730986955). {}
[INFO ] 2019-03-12T14:13:39,212Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6811258690730986955). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=7ec7bb87-57fb-42bd-a663-b47aa4e4f9b1, invocation_timestamp=2019-03-12T14:13:39.210Z, session_id=7ec7bb87-57fb-42bd-a663-b47aa4e4f9b1, session_timestamp=2019-03-12T14:13:39.210Z}
[INFO ] 2019-03-12T14:28:52,992Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-db258e59-3361-4a91-8ce5-d47a83edc1e0.jar {}
[INFO ] 2019-03-12T14:28:53,021Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-bc2e2be9-bb81-4ff3-adca-47338257eb83.jar {}
[INFO ] 2019-03-12T14:28:53,068Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-db258e59-3361-4a91-8ce5-d47a83edc1e0.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-bc2e2be9-bb81-4ff3-adca-47338257eb83.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:28:53,105Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:28:53,109Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:28:53,122Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-db258e59-3361-4a91-8ce5-d47a83edc1e0.jar {}
[INFO ] 2019-03-12T14:28:53,152Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-bc2e2be9-bb81-4ff3-adca-47338257eb83.jar {}
[INFO ] 2019-03-12T14:28:53,286Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T14:28:53,940Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:28:53,998Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:28:54,005Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:28:56,145Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:28:56,658Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:28:56,660Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:56,670Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:56,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:56,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:56,910Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 3BAE0C45B3D0A6DF827FB5BC983F8897631002D5D3E53ED7D44A4E4808BDE035 {}
[WARN ] 2019-03-12T14:28:56,917Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:28:56,999Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:28:57,113Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:28:57,123Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:28:57,168Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9B54484DBC4AA37E7388BF6E201F3D21FE648A27ED621371122DAE2D20A7C82B, not inserting the second time {}
[INFO ] 2019-03-12T14:28:57,235Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,257Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,261Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,262Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,264Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,269Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:28:57,270Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:28:57,287Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:28:57,296Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T14:28:57,308Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:28:57,310Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,312Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,444Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,455Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:28:57,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,461Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,466Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,467Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,523Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 3BAE0C45B3D0A6DF827FB5BC983F8897631002D5D3E53ED7D44A4E4808BDE035 {}
[WARN ] 2019-03-12T14:28:57,526Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:28:57,538Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:28:57,541Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:28:57,553Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 252C2D1140662D51C6FDEC6EBD38270F0E38F03628D83C60C2CAA45D37EE2215, not inserting the second time {}
[INFO ] 2019-03-12T14:28:57,562Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,565Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,579Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,582Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,584Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,598Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,600Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,609Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,611Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,614Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,616Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,618Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,623Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:28:57,626Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:28:57,647Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:28:57,658Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T14:28:57,667Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:28:57,669Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,670Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,766Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:28:57,777Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:28:57,780Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,796Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,856Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 3BAE0C45B3D0A6DF827FB5BC983F8897631002D5D3E53ED7D44A4E4808BDE035 {}
[WARN ] 2019-03-12T14:28:57,858Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:28:57,868Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:28:57,869Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:28:57,878Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C541BFE9389AA06D8E0764D42CEEFF54BB10A35BDE233082CE808CE5C83177A9, not inserting the second time {}
[INFO ] 2019-03-12T14:28:57,886Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,889Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,899Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552400936660) {}
[INFO ] 2019-03-12T14:28:57,900Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,903Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,916Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,925Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552400937456) {}
[INFO ] 2019-03-12T14:28:57,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:28:57,938Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,940Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,945Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,947Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,948Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:57,950Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:28:57,952Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552400937780) {}
[INFO ] 2019-03-12T14:28:58,417Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].call - Started sending message hey {}
[INFO ] 2019-03-12T14:28:58,599Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:28:58,670Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9158265982942823421). {}
[INFO ] 2019-03-12T14:28:58,768Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].call - Started sending message hey {}
[INFO ] 2019-03-12T14:28:58,808Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:28:58,821Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3613158165698496293). {}
[INFO ] 2019-03-12T14:28:58,796Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9158265982942823421). {invocation_id=b1fb45ba-44ee-43d3-82fd-4b361203d1dc, invocation_timestamp=2019-03-12T14:28:58.787Z, session_id=b1fb45ba-44ee-43d3-82fd-4b361203d1dc, session_timestamp=2019-03-12T14:28:58.787Z}
[INFO ] 2019-03-12T14:28:58,829Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:28:58,849Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3613158165698496293). {invocation_id=01b6a6e5-92fa-4b2f-be86-407b54397c36, invocation_timestamp=2019-03-12T14:28:58.848Z, session_id=01b6a6e5-92fa-4b2f-be86-407b54397c36, session_timestamp=2019-03-12T14:28:58.848Z}
[INFO ] 2019-03-12T14:28:58,857Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:28:58,863Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3405869561182772741). {}
[INFO ] 2019-03-12T14:28:58,872Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:28:58,907Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:28:58,924Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7397716946246500702). {}
[INFO ] 2019-03-12T14:28:58,928Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3405869561182772741). {invocation_id=1fa577c3-2b3b-4d60-a229-161d8971359b, invocation_timestamp=2019-03-12T14:28:58.927Z, session_id=1fa577c3-2b3b-4d60-a229-161d8971359b, session_timestamp=2019-03-12T14:28:58.927Z}
[INFO ] 2019-03-12T14:28:58,989Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7397716946246500702). {invocation_id=9b46eb80-3cef-49a1-93da-4dda5340b5a5, invocation_timestamp=2019-03-12T14:28:58.988Z, session_id=9b46eb80-3cef-49a1-93da-4dda5340b5a5, session_timestamp=2019-03-12T14:28:58.988Z}
[INFO ] 2019-03-12T14:28:59,046Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:28:59,103Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3340572598831186456). {}
[INFO ] 2019-03-12T14:28:59,123Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3340572598831186456). {invocation_id=bba1e238-f6de-4d27-879c-045fc3942e80, invocation_timestamp=2019-03-12T14:28:59.122Z, session_id=bba1e238-f6de-4d27-879c-045fc3942e80, session_timestamp=2019-03-12T14:28:59.122Z}
[INFO ] 2019-03-12T14:28:59,142Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:28:59,155Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6762906603806397245). {}
[INFO ] 2019-03-12T14:28:59,168Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6762906603806397245). {invocation_id=00fd3f59-b9fa-4b21-be9c-475c40bf5715, invocation_timestamp=2019-03-12T14:28:59.167Z, session_id=00fd3f59-b9fa-4b21-be9c-475c40bf5715, session_timestamp=2019-03-12T14:28:59.167Z}
[INFO ] 2019-03-12T14:28:59,175Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:28:59,189Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5689175273176112168). {}
[INFO ] 2019-03-12T14:28:59,208Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:28:59,208Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5689175273176112168). {invocation_id=d68ab628-03f3-4247-9d89-0b1620e80739, invocation_timestamp=2019-03-12T14:28:59.207Z, session_id=d68ab628-03f3-4247-9d89-0b1620e80739, session_timestamp=2019-03-12T14:28:59.207Z}
[INFO ] 2019-03-12T14:28:59,217Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3140602850410323287). {}
[INFO ] 2019-03-12T14:28:59,226Z [Mock node 1 thread] flow.[307984ed-f836-4142-a4d7-58fc94b4728b].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:28:59,225Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3140602850410323287). {invocation_id=19a011b1-8aed-49dd-bdd4-e9407ae258c9, invocation_timestamp=2019-03-12T14:28:59.224Z, session_id=19a011b1-8aed-49dd-bdd4-e9407ae258c9, session_timestamp=2019-03-12T14:28:59.224Z}
[INFO ] 2019-03-12T14:28:59,244Z [Mock node 1 thread] flow.[cc40d04a-fc77-4f14-bd03-0bb5ad76277e].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:28:59,247Z [Mock node 1 thread] flow.[a51ccea2-84f9-43d1-a5ec-71fad93b5270].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:28:59,254Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:28:59,256Z [Mock node 1 thread] flow.[f7f47e77-455b-4a3c-8e9b-d3334cfe8707].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:31:38,793Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ded419fe-33d6-47de-b9ff-7558a776e4fd.jar {}
[INFO ] 2019-03-12T14:31:38,825Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ff068f7b-5e18-4422-b24a-04c09532fa2d.jar {}
[INFO ] 2019-03-12T14:31:38,891Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ded419fe-33d6-47de-b9ff-7558a776e4fd.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ff068f7b-5e18-4422-b24a-04c09532fa2d.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:31:38,939Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:31:38,943Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:31:38,960Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ded419fe-33d6-47de-b9ff-7558a776e4fd.jar {}
[INFO ] 2019-03-12T14:31:38,991Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ff068f7b-5e18-4422-b24a-04c09532fa2d.jar {}
[INFO ] 2019-03-12T14:31:39,147Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T14:31:39,941Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:31:39,982Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:31:39,985Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:31:42,077Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:31:42,595Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:31:42,598Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:42,609Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:42,721Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:42,723Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:42,882Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:31:42,889Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:31:42,977Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:31:43,100Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:31:43,109Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:31:43,158Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5122BFD2EA78DF25286CD4EB45A8577640D3B4115104BC13D09384B2CEE63EA8, not inserting the second time {}
[INFO ] 2019-03-12T14:31:43,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,246Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,247Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,248Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,250Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,258Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:31:43,259Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:31:43,277Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:31:43,287Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T14:31:43,298Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:31:43,300Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,302Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,428Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,438Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:31:43,440Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,445Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,451Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,452Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,507Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:31:43,509Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:31:43,521Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:31:43,523Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:31:43,535Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3B7E729FD6DFA20646B962D16B90E8D621C6A9C2A785B255BA94991EBF56410E, not inserting the second time {}
[INFO ] 2019-03-12T14:31:43,543Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,547Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,560Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,561Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,564Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,577Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,578Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,590Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,593Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,595Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,597Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,600Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,604Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:31:43,607Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:31:43,628Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:31:43,638Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T14:31:43,648Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:31:43,649Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,650Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,760Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:31:43,771Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:31:43,772Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,776Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,781Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,783Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,840Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:31:43,842Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:31:43,850Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:31:43,851Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:31:43,860Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key ADC241CBCE393661BB1B5031927344B9CA075AA8D1960B3721CE0C20D5F4F64B, not inserting the second time {}
[INFO ] 2019-03-12T14:31:43,867Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,869Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,879Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401102598) {}
[INFO ] 2019-03-12T14:31:43,881Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,883Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,893Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,896Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,906Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401103440) {}
[INFO ] 2019-03-12T14:31:43,907Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,909Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:31:43,918Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,924Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,926Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,927Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:43,928Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:31:43,928Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401103772) {}
[INFO ] 2019-03-12T14:31:44,333Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].call - Started sending message hey {}
[INFO ] 2019-03-12T14:31:44,518Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:31:44,588Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=321473182541926132). {}
[INFO ] 2019-03-12T14:31:44,697Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].call - Started sending message hey {}
[INFO ] 2019-03-12T14:31:44,734Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:31:44,751Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5508936594793920013). {}
[INFO ] 2019-03-12T14:31:44,719Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=321473182541926132). {invocation_id=398de132-c954-4c17-8665-6ce20a8d8902, invocation_timestamp=2019-03-12T14:31:44.711Z, session_id=398de132-c954-4c17-8665-6ce20a8d8902, session_timestamp=2019-03-12T14:31:44.711Z}
[INFO ] 2019-03-12T14:31:44,763Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:31:44,780Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5508936594793920013). {invocation_id=ec1652d3-4f1e-4efe-a918-eb4f850f8531, invocation_timestamp=2019-03-12T14:31:44.780Z, session_id=ec1652d3-4f1e-4efe-a918-eb4f850f8531, session_timestamp=2019-03-12T14:31:44.780Z}
[INFO ] 2019-03-12T14:31:44,792Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:31:44,799Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6810459890494327217). {}
[INFO ] 2019-03-12T14:31:44,807Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:31:44,841Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:31:44,851Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8332595217768793795). {}
[INFO ] 2019-03-12T14:31:44,852Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6810459890494327217). {invocation_id=4ae42a11-e065-4f9c-ad19-bfe3094ec127, invocation_timestamp=2019-03-12T14:31:44.851Z, session_id=4ae42a11-e065-4f9c-ad19-bfe3094ec127, session_timestamp=2019-03-12T14:31:44.851Z}
[INFO ] 2019-03-12T14:31:44,888Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8332595217768793795). {invocation_id=755fab3b-1652-47fd-9488-ca94edf2e7ce, invocation_timestamp=2019-03-12T14:31:44.887Z, session_id=755fab3b-1652-47fd-9488-ca94edf2e7ce, session_timestamp=2019-03-12T14:31:44.887Z}
[INFO ] 2019-03-12T14:31:44,958Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:31:45,034Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8541761125900059143). {}
[INFO ] 2019-03-12T14:31:45,060Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8541761125900059143). {invocation_id=cea57670-65eb-4839-848c-168bc2cd1086, invocation_timestamp=2019-03-12T14:31:45.059Z, session_id=cea57670-65eb-4839-848c-168bc2cd1086, session_timestamp=2019-03-12T14:31:45.059Z}
[INFO ] 2019-03-12T14:31:45,081Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:31:45,095Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6134205902470948675). {}
[INFO ] 2019-03-12T14:31:45,108Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:31:45,107Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6134205902470948675). {invocation_id=939c4d13-8bd4-4c37-90f0-fe3c19ee0ad8, invocation_timestamp=2019-03-12T14:31:45.106Z, session_id=939c4d13-8bd4-4c37-90f0-fe3c19ee0ad8, session_timestamp=2019-03-12T14:31:45.106Z}
[INFO ] 2019-03-12T14:31:45,117Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-465256283067574718). {}
[INFO ] 2019-03-12T14:31:45,129Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:31:45,129Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-465256283067574718). {invocation_id=7d42f1d7-7139-4cea-ab4e-118f03cabed9, invocation_timestamp=2019-03-12T14:31:45.129Z, session_id=7d42f1d7-7139-4cea-ab4e-118f03cabed9, session_timestamp=2019-03-12T14:31:45.129Z}
[INFO ] 2019-03-12T14:31:45,138Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3645936785821894167). {}
[INFO ] 2019-03-12T14:31:45,155Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3645936785821894167). {invocation_id=bebf4095-c4e2-46b1-a4e5-cf2edded423e, invocation_timestamp=2019-03-12T14:31:45.153Z, session_id=bebf4095-c4e2-46b1-a4e5-cf2edded423e, session_timestamp=2019-03-12T14:31:45.153Z}
[INFO ] 2019-03-12T14:31:45,161Z [Mock node 1 thread] flow.[1b3c7671-9ede-49a9-be3b-8303d7bd8d23].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:31:45,171Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:31:45,171Z [Mock node 1 thread] flow.[90654ddd-1505-4ac8-865c-628601b2cac7].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:31:45,179Z [Mock node 1 thread] flow.[99e5deff-f70f-43a8-b828-c9951435a3b1].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:31:45,183Z [Mock node 1 thread] flow.[d4cae7e4-0193-41e5-b579-a0d963d2ba75].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:35:00,386Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-731a6ade-9758-4f87-b7e0-ea3680e78c6d.jar {}
[INFO ] 2019-03-12T14:35:00,479Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ad7da89b-f069-46b9-a71e-ffa03c7d4c13.jar {}
[INFO ] 2019-03-12T14:35:00,540Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-731a6ade-9758-4f87-b7e0-ea3680e78c6d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ad7da89b-f069-46b9-a71e-ffa03c7d4c13.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:35:00,580Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:35:00,583Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:35:00,597Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-731a6ade-9758-4f87-b7e0-ea3680e78c6d.jar {}
[INFO ] 2019-03-12T14:35:00,628Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ad7da89b-f069-46b9-a71e-ffa03c7d4c13.jar {}
[INFO ] 2019-03-12T14:35:00,799Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3c5095df {}
[INFO ] 2019-03-12T14:35:01,625Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:35:01,676Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:35:01,680Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:35:03,915Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:35:04,509Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:35:04,511Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:04,522Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:04,636Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:04,638Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:04,829Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:35:04,837Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:35:04,940Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:35:05,079Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:35:05,090Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:35:05,144Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 79BB771C63A77B5E492E560C7253A37321B719B3CB9B02C1084EE3AD5026BC3A, not inserting the second time {}
[INFO ] 2019-03-12T14:35:05,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,248Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:05,250Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,251Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,253Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:05,255Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,262Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:35:05,265Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:35:05,287Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:35:05,300Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a474e00 {}
[INFO ] 2019-03-12T14:35:05,315Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:35:05,319Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,322Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,449Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,458Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:35:05,459Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,464Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,470Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,471Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,533Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:35:05,536Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:35:05,550Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:35:05,552Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:35:05,568Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9DAA500312B878B561832C0970DA39E94D98786CD482F70D407D5203BDE926C1, not inserting the second time {}
[INFO ] 2019-03-12T14:35:05,579Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,582Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,596Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,598Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,601Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,612Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,614Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,620Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:05,621Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,624Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:05,625Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,627Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:35:05,629Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:35:05,646Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:35:05,674Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@28356892 {}
[INFO ] 2019-03-12T14:35:05,715Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:35:05,717Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,718Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,841Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:35:05,854Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:35:05,855Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:05,862Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,867Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:05,868Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:05,923Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 9EAE1CABAE8809CE30FEC9AD98FD070D47B24E34CB80BF83A78A44940BB21C61 {}
[WARN ] 2019-03-12T14:35:05,924Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:35:05,932Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:35:05,934Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:35:05,943Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D596BFDFEDF87AAEE43B6207B5B3E17914AF1E4FCE5317D63C9DE8F0B1BC94F4, not inserting the second time {}
[INFO ] 2019-03-12T14:35:05,951Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,955Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,965Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401304511) {}
[INFO ] 2019-03-12T14:35:05,966Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:05,969Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,980Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:05,981Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,984Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:05,995Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401305459) {}
[INFO ] 2019-03-12T14:35:05,997Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:06,000Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:35:06,011Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:06,013Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:06,020Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:06,022Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:06,024Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:06,026Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:35:06,028Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401305855) {}
[INFO ] 2019-03-12T14:35:39,606Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:35:39,821Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:35:39,893Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2051649009580088103). {}
[INFO ] 2019-03-12T14:35:39,982Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:35:40,015Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:35:40,022Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2270094452142987656). {}
[INFO ] 2019-03-12T14:35:40,038Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].call - Started sending message hey {}
[INFO ] 2019-03-12T14:35:40,010Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2051649009580088103). {invocation_id=4247fa46-885a-4e63-93b9-7d38ba7e5473, invocation_timestamp=2019-03-12T14:35:40Z, session_id=4247fa46-885a-4e63-93b9-7d38ba7e5473, session_timestamp=2019-03-12T14:35:40Z}
[INFO ] 2019-03-12T14:35:40,066Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:35:40,072Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6682035097605533487). {}
[INFO ] 2019-03-12T14:35:40,082Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2270094452142987656). {invocation_id=c993e5fe-1544-492e-823d-e5a01d11c055, invocation_timestamp=2019-03-12T14:35:40.080Z, session_id=c993e5fe-1544-492e-823d-e5a01d11c055, session_timestamp=2019-03-12T14:35:40.080Z}
[INFO ] 2019-03-12T14:35:40,080Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].call - Started sending message hey {}
[INFO ] 2019-03-12T14:35:40,109Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:35:40,118Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2454871081907782601). {}
[INFO ] 2019-03-12T14:35:40,139Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6682035097605533487). {invocation_id=cb0a6529-12fc-4b36-941d-ea39852e69d9, invocation_timestamp=2019-03-12T14:35:40.138Z, session_id=cb0a6529-12fc-4b36-941d-ea39852e69d9, session_timestamp=2019-03-12T14:35:40.138Z}
[INFO ] 2019-03-12T14:35:40,159Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2454871081907782601). {invocation_id=65fc7442-39ed-496a-8764-80380fc51625, invocation_timestamp=2019-03-12T14:35:40.159Z, session_id=65fc7442-39ed-496a-8764-80380fc51625, session_timestamp=2019-03-12T14:35:40.159Z}
[INFO ] 2019-03-12T14:35:40,366Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:35:40,425Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7802464196032725108). {}
[INFO ] 2019-03-12T14:35:40,445Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7802464196032725108). {invocation_id=21ee33c6-45cc-4cf2-9e28-1c19a3cfc731, invocation_timestamp=2019-03-12T14:35:40.444Z, session_id=21ee33c6-45cc-4cf2-9e28-1c19a3cfc731, session_timestamp=2019-03-12T14:35:40.444Z}
[INFO ] 2019-03-12T14:35:40,463Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:35:40,473Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5813957012015548465). {}
[INFO ] 2019-03-12T14:35:40,480Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5813957012015548465). {invocation_id=ff45673a-e344-4227-8642-4f7da64eefad, invocation_timestamp=2019-03-12T14:35:40.480Z, session_id=ff45673a-e344-4227-8642-4f7da64eefad, session_timestamp=2019-03-12T14:35:40.480Z}
[INFO ] 2019-03-12T14:35:40,482Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:35:40,491Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4578043454133619474). {}
[INFO ] 2019-03-12T14:35:40,502Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4578043454133619474). {invocation_id=5b6df2f2-bf9c-481e-9ecd-650ef2f03c7b, invocation_timestamp=2019-03-12T14:35:40.501Z, session_id=5b6df2f2-bf9c-481e-9ecd-650ef2f03c7b, session_timestamp=2019-03-12T14:35:40.501Z}
[INFO ] 2019-03-12T14:35:40,506Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:35:40,515Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3081540609700195441). {}
[INFO ] 2019-03-12T14:35:40,525Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3081540609700195441). {invocation_id=42edf1ec-94ad-486b-bbff-e43919ff7b66, invocation_timestamp=2019-03-12T14:35:40.524Z, session_id=42edf1ec-94ad-486b-bbff-e43919ff7b66, session_timestamp=2019-03-12T14:35:40.524Z}
[INFO ] 2019-03-12T14:35:40,538Z [Mock node 1 thread] flow.[03ce496f-72e2-4cd1-9ea5-89cb2ae99014].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:35:40,557Z [Mock node 1 thread] flow.[075836e9-38a6-45dd-99e1-35a4778316e8].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:35:40,562Z [Mock node 1 thread] flow.[aa0c76f5-3208-40bb-beae-d6daba0709bf].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:35:40,566Z [Mock node 1 thread] flow.[848f5ff4-70ca-40e4-9b0d-01ed1a3aa3cc].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:36:21,331Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:44:07,775Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-29929b95-ae0f-48da-9f4a-2a04db23cc43.jar {}
[INFO ] 2019-03-12T14:44:07,804Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ab3b7359-c8cb-47cc-96c9-8571c215a726.jar {}
[INFO ] 2019-03-12T14:44:07,854Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-29929b95-ae0f-48da-9f4a-2a04db23cc43.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ab3b7359-c8cb-47cc-96c9-8571c215a726.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:44:07,887Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:07,891Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:07,905Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-29929b95-ae0f-48da-9f4a-2a04db23cc43.jar {}
[INFO ] 2019-03-12T14:44:07,937Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ab3b7359-c8cb-47cc-96c9-8571c215a726.jar {}
[INFO ] 2019-03-12T14:44:08,072Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@56394880 {}
[INFO ] 2019-03-12T14:44:08,764Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:08,810Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:08,814Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:11,013Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:11,659Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:11,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:11,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:11,787Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:11,790Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:11,976Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:11,983Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:12,085Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:44:12,223Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:12,233Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:12,318Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FB12E0465307AF724C7B50F222D40D011D2A868B46C7019868C8889599E93A0D, not inserting the second time {}
[INFO ] 2019-03-12T14:44:12,394Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,417Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:12,419Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,422Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:12,423Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,428Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:12,430Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:12,451Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:44:12,464Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4971134b {}
[INFO ] 2019-03-12T14:44:12,478Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:12,481Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,483Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,603Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,613Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:12,614Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,620Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:12,626Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,627Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,687Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:12,690Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:12,703Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:12,705Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:12,718Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3F774516EB242B6060FADC4E85000C2EC78946F4EB47287CA4A5995FE0616BDA, not inserting the second time {}
[INFO ] 2019-03-12T14:44:12,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,732Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:12,745Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:12,748Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,750Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:12,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,761Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,766Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:12,768Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,769Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,771Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:12,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:12,776Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:12,778Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:12,796Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:44:12,804Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@64a0247e {}
[INFO ] 2019-03-12T14:44:12,815Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:12,818Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,819Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,935Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:12,948Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:12,950Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:12,957Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:12,964Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:12,967Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,034Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:13,036Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:13,044Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:13,046Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:13,057Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 57EAF2AF31C4FF686BCA479EE02807179998ED4370972466D0FF854E8BD56781, not inserting the second time {}
[INFO ] 2019-03-12T14:44:13,066Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:13,069Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:13,077Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401851661) {}
[INFO ] 2019-03-12T14:44:13,079Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,081Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:13,091Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:13,095Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:13,105Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401852614) {}
[INFO ] 2019-03-12T14:44:13,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,110Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:13,122Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,131Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:13,133Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,134Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:13,136Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:13,138Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401852950) {}
[INFO ] 2019-03-12T14:44:53,512Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-6cff98cd-3c8f-4a36-93ae-bd271834acf1.jar {}
[INFO ] 2019-03-12T14:44:53,537Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-b6f69b4b-905f-43e4-a1dc-b826a306e2ce.jar {}
[INFO ] 2019-03-12T14:44:53,585Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6cff98cd-3c8f-4a36-93ae-bd271834acf1.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b6f69b4b-905f-43e4-a1dc-b826a306e2ce.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:44:53,617Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:53,621Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:53,633Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6cff98cd-3c8f-4a36-93ae-bd271834acf1.jar {}
[INFO ] 2019-03-12T14:44:53,663Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b6f69b4b-905f-43e4-a1dc-b826a306e2ce.jar {}
[INFO ] 2019-03-12T14:44:53,782Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3f7a7ce6 {}
[INFO ] 2019-03-12T14:44:54,421Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:54,468Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:54,471Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:56,497Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:44:57,002Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:57,004Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,015Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:57,111Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,112Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,268Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:57,274Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:57,362Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:44:57,479Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:57,489Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:57,531Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F7B785C910E3C97F587E9040DE32BF86C7F7E5D2971324EA59800C66D328EDE0, not inserting the second time {}
[INFO ] 2019-03-12T14:44:57,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,620Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:57,622Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,625Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:57,626Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,631Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:57,633Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:57,650Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:44:57,659Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@699e81db {}
[INFO ] 2019-03-12T14:44:57,668Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:57,671Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:57,672Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:57,791Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:57,802Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:57,803Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,809Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:57,814Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,815Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,871Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:57,873Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:57,883Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:57,884Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:57,894Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BF0AC2C9AA6548E77C9C567D09D28393DC180537921ECB79AB8BDC0F53E62A9F, not inserting the second time {}
[INFO ] 2019-03-12T14:44:57,901Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,904Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:57,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:57,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,917Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:57,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,928Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,933Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:57,934Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,935Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,937Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:57,938Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:57,941Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:44:57,943Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:44:57,962Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:44:57,971Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a146acb {}
[INFO ] 2019-03-12T14:44:57,985Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:44:57,987Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:57,989Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:58,095Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:44:58,107Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:44:58,109Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,113Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:58,119Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,120Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,175Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 245FF5283EA8E1E82E122324313EFB78EAB31385558283EC8C07D9AF38F8ED40 {}
[WARN ] 2019-03-12T14:44:58,177Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:44:58,190Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:44:58,192Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:44:58,202Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 56EDD6B83EEDBFBF894C6F2BC561C3B7CD704D742A4A3E60D909146BFC4718ED, not inserting the second time {}
[INFO ] 2019-03-12T14:44:58,214Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:58,218Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:58,232Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552401897004) {}
[INFO ] 2019-03-12T14:44:58,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,237Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:58,252Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,254Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:58,257Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:58,270Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552401897803) {}
[INFO ] 2019-03-12T14:44:58,271Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,273Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:44:58,283Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,289Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:58,290Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:44:58,292Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:44:58,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552401898109) {}
[INFO ] 2019-03-12T14:55:05,847Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-6d1ee5bf-915f-4f0b-8df8-531b4aa5da0a.jar {}
[INFO ] 2019-03-12T14:55:05,875Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-70c6b71b-8735-4782-8ea9-18e32931828e.jar {}
[INFO ] 2019-03-12T14:55:05,925Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6d1ee5bf-915f-4f0b-8df8-531b4aa5da0a.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-70c6b71b-8735-4782-8ea9-18e32931828e.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:55:05,955Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:55:05,960Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:55:05,973Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6d1ee5bf-915f-4f0b-8df8-531b4aa5da0a.jar {}
[INFO ] 2019-03-12T14:55:06,004Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-70c6b71b-8735-4782-8ea9-18e32931828e.jar {}
[INFO ] 2019-03-12T14:55:06,135Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3f7a7ce6 {}
[INFO ] 2019-03-12T14:55:06,754Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:55:06,795Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:55:06,799Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:55:08,794Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:55:09,301Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:55:09,304Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,314Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:09,409Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,411Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,564Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T14:55:09,570Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:55:09,664Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:55:09,782Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:55:09,792Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:55:09,835Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D46106972D8FF36445AFEDBC64974FC34BACBFF56331522F255134EDBE06933B, not inserting the second time {}
[INFO ] 2019-03-12T14:55:09,899Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,922Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:09,924Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,928Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:09,929Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:09,934Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:55:09,936Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:55:09,953Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:55:09,965Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@699e81db {}
[INFO ] 2019-03-12T14:55:09,976Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:55:09,977Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:09,979Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:10,100Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:10,110Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:55:10,112Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,117Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,123Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,125Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,182Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T14:55:10,184Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:55:10,194Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:55:10,195Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:55:10,206Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 090DF39AD287916A3A8C704807576360C5049742274FB21201B2C2F1D5563783, not inserting the second time {}
[INFO ] 2019-03-12T14:55:10,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:10,220Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,232Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:10,234Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,237Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,250Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,251Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,257Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:10,260Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,262Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,265Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:10,266Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,269Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:55:10,271Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:55:10,289Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:55:10,298Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a146acb {}
[INFO ] 2019-03-12T14:55:10,308Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:55:10,310Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:10,312Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:10,398Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:55:10,407Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:55:10,409Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,414Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,420Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,421Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,481Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T14:55:10,483Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:55:10,494Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:55:10,497Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:55:10,507Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1ED16644A6D867E8B72950D0B9A058CA333EE0CD29F780A33F383A5879871DC3, not inserting the second time {}
[INFO ] 2019-03-12T14:55:10,517Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:10,520Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402509303) {}
[INFO ] 2019-03-12T14:55:10,530Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,532Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,542Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,544Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,546Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,555Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402510112) {}
[INFO ] 2019-03-12T14:55:10,557Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,559Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:55:10,569Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,570Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,575Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:10,576Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,577Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:10,579Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:55:10,580Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402510409) {}
[INFO ] 2019-03-12T14:55:11,004Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].call - Started sending message hey {}
[INFO ] 2019-03-12T14:55:11,183Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:55:11,248Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6645998037306190730). {}
[INFO ] 2019-03-12T14:55:11,318Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].call - Started sending message hey {}
[INFO ] 2019-03-12T14:55:11,347Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:55:11,353Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3139698439199209589). {}
[INFO ] 2019-03-12T14:55:11,362Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:55:11,339Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6645998037306190730). {invocation_id=47de481d-9719-4ac8-9144-8ea295c3a7b2, invocation_timestamp=2019-03-12T14:55:11.331Z, session_id=47de481d-9719-4ac8-9144-8ea295c3a7b2, session_timestamp=2019-03-12T14:55:11.331Z}
[INFO ] 2019-03-12T14:55:11,393Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:55:11,402Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5325524785974137964). {}
[INFO ] 2019-03-12T14:55:11,407Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3139698439199209589). {invocation_id=1931107f-7de3-42c0-9e15-9b474df592e4, invocation_timestamp=2019-03-12T14:55:11.406Z, session_id=1931107f-7de3-42c0-9e15-9b474df592e4, session_timestamp=2019-03-12T14:55:11.406Z}
[INFO ] 2019-03-12T14:55:11,410Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:55:11,448Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:55:11,457Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2205205983513727120). {}
[INFO ] 2019-03-12T14:55:11,458Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5325524785974137964). {invocation_id=520e0c17-106c-44f6-8437-a074a61b9e70, invocation_timestamp=2019-03-12T14:55:11.457Z, session_id=520e0c17-106c-44f6-8437-a074a61b9e70, session_timestamp=2019-03-12T14:55:11.457Z}
[INFO ] 2019-03-12T14:55:11,518Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2205205983513727120). {invocation_id=304d0d71-3210-406a-9d12-b2703d198d43, invocation_timestamp=2019-03-12T14:55:11.517Z, session_id=304d0d71-3210-406a-9d12-b2703d198d43, session_timestamp=2019-03-12T14:55:11.517Z}
[INFO ] 2019-03-12T14:55:11,584Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:55:11,634Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7486600586357340357). {}
[INFO ] 2019-03-12T14:55:11,655Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7486600586357340357). {invocation_id=167af879-ac9a-48fd-ba73-51f24d3680c9, invocation_timestamp=2019-03-12T14:55:11.654Z, session_id=167af879-ac9a-48fd-ba73-51f24d3680c9, session_timestamp=2019-03-12T14:55:11.654Z}
[INFO ] 2019-03-12T14:55:11,672Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:55:11,686Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5545200745255574853). {}
[INFO ] 2019-03-12T14:55:11,695Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5545200745255574853). {invocation_id=8b433ce8-c3b3-4156-8476-9e7069e85125, invocation_timestamp=2019-03-12T14:55:11.694Z, session_id=8b433ce8-c3b3-4156-8476-9e7069e85125, session_timestamp=2019-03-12T14:55:11.694Z}
[INFO ] 2019-03-12T14:55:11,714Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:55:11,727Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4300032855722209427). {}
[INFO ] 2019-03-12T14:55:11,739Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4300032855722209427). {invocation_id=7d4832f0-e664-4ee9-ac39-d24fa89dbd0b, invocation_timestamp=2019-03-12T14:55:11.738Z, session_id=7d4832f0-e664-4ee9-ac39-d24fa89dbd0b, session_timestamp=2019-03-12T14:55:11.738Z}
[INFO ] 2019-03-12T14:55:11,740Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:55:11,749Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6343238345861615679). {}
[INFO ] 2019-03-12T14:55:11,760Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6343238345861615679). {invocation_id=dea49165-8edb-44ae-8cec-9866630a32df, invocation_timestamp=2019-03-12T14:55:11.760Z, session_id=dea49165-8edb-44ae-8cec-9866630a32df, session_timestamp=2019-03-12T14:55:11.760Z}
[INFO ] 2019-03-12T14:55:11,761Z [Mock node 1 thread] flow.[0540a798-e76b-4a0a-a984-006731fc0a8e].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:55:11,773Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:55:11,786Z [Mock node 1 thread] flow.[07a668bd-2914-476d-909b-284271852343].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:55:11,789Z [Mock node 1 thread] flow.[7d135834-9876-4444-9f1d-6d63ec2741ee].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:55:11,792Z [Mock node 1 thread] flow.[ca5bf552-cdf6-4a32-836a-184ecb067129].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:56:55,236Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-22d721eb-02cc-4e61-9bff-025eb25c47e3.jar {}
[INFO ] 2019-03-12T14:56:55,267Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-aed5cece-cb81-464e-8155-4f592b769148.jar {}
[INFO ] 2019-03-12T14:56:55,313Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-22d721eb-02cc-4e61-9bff-025eb25c47e3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-aed5cece-cb81-464e-8155-4f592b769148.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:56:55,346Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:56:55,351Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:56:55,365Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-22d721eb-02cc-4e61-9bff-025eb25c47e3.jar {}
[INFO ] 2019-03-12T14:56:55,395Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-aed5cece-cb81-464e-8155-4f592b769148.jar {}
[INFO ] 2019-03-12T14:56:55,510Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T14:56:56,177Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:56:56,223Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:56:56,227Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:56:58,203Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:56:58,719Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:56:58,721Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:58,731Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:58,826Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:58,828Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:58,980Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T14:56:58,986Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:56:59,073Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:56:59,190Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:56:59,200Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:56:59,248Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 57B43073534E0D26DEA63F03DEFDD733569FEFC46AC0722E99AC00AECC947354, not inserting the second time {}
[INFO ] 2019-03-12T14:56:59,313Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,336Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:56:59,338Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,342Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:56:59,344Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,349Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:56:59,351Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:56:59,367Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:56:59,376Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T14:56:59,387Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:56:59,390Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,392Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,519Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,531Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:56:59,533Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,538Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,543Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,544Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,601Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T14:56:59,603Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:56:59,617Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:56:59,619Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:56:59,634Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6DD41811EA5E4A05C2F72F4C56B89964A91FDB8CACD417DF444B7B7ADF7A55FF, not inserting the second time {}
[INFO ] 2019-03-12T14:56:59,642Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,645Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,658Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,660Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,662Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,684Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:56:59,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,687Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,688Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:56:59,691Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,694Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:56:59,696Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:56:59,714Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T14:56:59,724Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T14:56:59,734Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:56:59,735Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,737Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,829Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T14:56:59,840Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:56:59,841Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,847Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,852Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,854Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,919Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T14:56:59,923Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:56:59,931Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:56:59,932Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T14:56:59,940Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1FE6467993DB1197D9575338471944CCD71F8EF4DD1FF4412BF3ED260CF65C69, not inserting the second time {}
[INFO ] 2019-03-12T14:56:59,949Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,951Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,959Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402618721) {}
[INFO ] 2019-03-12T14:56:59,960Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,962Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,972Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,975Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,977Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,987Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402619533) {}
[INFO ] 2019-03-12T14:56:59,988Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:56:59,990Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:56:59,999Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:57:00,001Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:57:00,005Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:57:00,007Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:57:00,008Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:57:00,009Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T14:57:00,010Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402619841) {}
[INFO ] 2019-03-12T14:57:00,431Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:57:00,608Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T14:57:00,682Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7561155181048854275). {}
[INFO ] 2019-03-12T14:57:00,753Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T14:57:00,784Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T14:57:00,797Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8015616429185019700). {}
[INFO ] 2019-03-12T14:57:00,776Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7561155181048854275). {invocation_id=964963e8-9ab5-4cc5-a5a2-eb145313f3d4, invocation_timestamp=2019-03-12T14:57:00.767Z, session_id=964963e8-9ab5-4cc5-a5a2-eb145313f3d4, session_timestamp=2019-03-12T14:57:00.767Z}
[INFO ] 2019-03-12T14:57:00,804Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].call - Started sending message hey {}
[INFO ] 2019-03-12T14:57:00,830Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8015616429185019700). {invocation_id=ab8f6028-5389-495e-84e2-6477f5bdd15b, invocation_timestamp=2019-03-12T14:57:00.829Z, session_id=ab8f6028-5389-495e-84e2-6477f5bdd15b, session_timestamp=2019-03-12T14:57:00.829Z}
[INFO ] 2019-03-12T14:57:00,833Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:57:00,840Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1632849990586799808). {}
[INFO ] 2019-03-12T14:57:00,848Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].call - Started sending message hey {}
[INFO ] 2019-03-12T14:57:00,875Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T14:57:00,883Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7883414583789039711). {}
[INFO ] 2019-03-12T14:57:00,895Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1632849990586799808). {invocation_id=ee4cdc54-e013-4e63-9af2-6c64164b44f0, invocation_timestamp=2019-03-12T14:57:00.893Z, session_id=ee4cdc54-e013-4e63-9af2-6c64164b44f0, session_timestamp=2019-03-12T14:57:00.893Z}
[INFO ] 2019-03-12T14:57:00,918Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7883414583789039711). {invocation_id=807840bb-8324-4d3b-815b-4b5c000f5828, invocation_timestamp=2019-03-12T14:57:00.917Z, session_id=807840bb-8324-4d3b-815b-4b5c000f5828, session_timestamp=2019-03-12T14:57:00.917Z}
[INFO ] 2019-03-12T14:57:01,019Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T14:57:01,072Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1335648284352281449). {}
[INFO ] 2019-03-12T14:57:01,093Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T14:57:01,093Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1335648284352281449). {invocation_id=bfbfe4c1-6e15-44ee-b41f-51b3accdc7e6, invocation_timestamp=2019-03-12T14:57:01.092Z, session_id=bfbfe4c1-6e15-44ee-b41f-51b3accdc7e6, session_timestamp=2019-03-12T14:57:01.092Z}
[INFO ] 2019-03-12T14:57:01,104Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4340591933633482942). {}
[INFO ] 2019-03-12T14:57:01,120Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4340591933633482942). {invocation_id=118ee8a2-8dae-4efc-9775-c9c1583ddd72, invocation_timestamp=2019-03-12T14:57:01.119Z, session_id=118ee8a2-8dae-4efc-9775-c9c1583ddd72, session_timestamp=2019-03-12T14:57:01.119Z}
[INFO ] 2019-03-12T14:57:01,143Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:57:01,152Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6120689032060337114). {}
[INFO ] 2019-03-12T14:57:01,161Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6120689032060337114). {invocation_id=a90e85d1-7d6b-4438-951c-0bd4cb4c919e, invocation_timestamp=2019-03-12T14:57:01.160Z, session_id=a90e85d1-7d6b-4438-951c-0bd4cb4c919e, session_timestamp=2019-03-12T14:57:01.160Z}
[INFO ] 2019-03-12T14:57:01,162Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T14:57:01,203Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8174220412874083066). {}
[INFO ] 2019-03-12T14:57:01,214Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8174220412874083066). {invocation_id=d341ec05-8c95-4a25-90b0-8e9c5edae9a1, invocation_timestamp=2019-03-12T14:57:01.213Z, session_id=d341ec05-8c95-4a25-90b0-8e9c5edae9a1, session_timestamp=2019-03-12T14:57:01.213Z}
[INFO ] 2019-03-12T14:57:01,215Z [Mock node 1 thread] flow.[a9b6b74a-f664-492b-88dc-f660d97b2a95].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T14:57:01,230Z [Mock node 1 thread] flow.[8b23212f-aa17-406a-8e2c-b023542ca7ab].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T14:57:01,241Z [Mock node 1 thread] flow.[ff6f8f73-ea5d-4d18-8dd3-742ca865d078].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:57:01,245Z [Mock node 1 thread] flow.[ed25ed9a-2f58-44c1-a4d4-109d0fd7e021].call - Finished sending message hey {}
[INFO ] 2019-03-12T14:57:01,254Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T14:59:56,023Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-3b690269-85e9-4581-bff7-6814e0c33ad9.jar {}
[INFO ] 2019-03-12T14:59:56,053Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-57401d46-2746-4d18-9b2d-eb7606f903e8.jar {}
[INFO ] 2019-03-12T14:59:56,102Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3b690269-85e9-4581-bff7-6814e0c33ad9.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-57401d46-2746-4d18-9b2d-eb7606f903e8.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T14:59:56,133Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T14:59:56,137Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T14:59:56,150Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3b690269-85e9-4581-bff7-6814e0c33ad9.jar {}
[INFO ] 2019-03-12T14:59:56,180Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-57401d46-2746-4d18-9b2d-eb7606f903e8.jar {}
[INFO ] 2019-03-12T14:59:56,311Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T14:59:56,933Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T14:59:56,977Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:59:56,981Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:59:58,979Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T14:59:59,483Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T14:59:59,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T14:59:59,496Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T14:59:59,583Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T14:59:59,585Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T14:59:59,740Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T14:59:59,748Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T14:59:59,834Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T14:59:59,950Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T14:59:59,960Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:00:00,005Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key ABCFD6FD115338E06F622B5658DAE1D6ACC6B01192D1E7E6E6CB149F9A90907D, not inserting the second time {}
[INFO ] 2019-03-12T15:00:00,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,090Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,092Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,093Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,095Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,096Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,103Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:00:00,161Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:00:00,188Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:00:00,202Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T15:00:00,216Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:00:00,218Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,220Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,347Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,356Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:00:00,357Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,362Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,367Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,368Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,431Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T15:00:00,433Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:00:00,445Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:00:00,448Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:00:00,461Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 375E199B606834DD9EDBE43CE2BAAD57DD27D3A237272F0E832080803183C0B9, not inserting the second time {}
[INFO ] 2019-03-12T15:00:00,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,473Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,485Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,486Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,489Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,500Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,501Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,506Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,507Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,509Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,510Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,512Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,514Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:00:00,516Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:00:00,531Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:00:00,538Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T15:00:00,549Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:00:00,550Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,551Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,656Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:00:00,667Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:00:00,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,674Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,681Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,683Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,739Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6F2F72F483A0E6EBFBF20D648BCA151C8E0E1BFD0744BCCB044B5C549F42AADB {}
[WARN ] 2019-03-12T15:00:00,740Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:00:00,750Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:00:00,751Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:00:00,760Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C2EA26D63FA9BC06CAC1E61A13B495327D829473813A9DC6B4935BFA5CC0E25C, not inserting the second time {}
[INFO ] 2019-03-12T15:00:00,769Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,771Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,781Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552402799485) {}
[INFO ] 2019-03-12T15:00:00,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,785Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,795Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,797Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,799Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,809Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552402800357) {}
[INFO ] 2019-03-12T15:00:00,811Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,813Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:00:00,822Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,824Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,828Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,829Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,830Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:00,831Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:00:00,832Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552402800669) {}
[INFO ] 2019-03-12T15:00:01,267Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T15:00:01,443Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T15:00:01,508Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2550778020120394152). {}
[INFO ] 2019-03-12T15:00:01,582Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:00:01,613Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T15:00:01,626Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6659820543411074618). {}
[INFO ] 2019-03-12T15:00:01,604Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2550778020120394152). {invocation_id=a78f934a-edc3-40b3-bba5-e2957acd862e, invocation_timestamp=2019-03-12T15:00:01.596Z, session_id=a78f934a-edc3-40b3-bba5-e2957acd862e, session_timestamp=2019-03-12T15:00:01.596Z}
[INFO ] 2019-03-12T15:00:01,633Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].call - Started sending message hey {}
[INFO ] 2019-03-12T15:00:01,659Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6659820543411074618). {invocation_id=3c6e801a-6f69-44e4-9c00-1a379265bea2, invocation_timestamp=2019-03-12T15:00:01.657Z, session_id=3c6e801a-6f69-44e4-9c00-1a379265bea2, session_timestamp=2019-03-12T15:00:01.657Z}
[INFO ] 2019-03-12T15:00:01,663Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:00:01,669Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3664034033216696388). {}
[INFO ] 2019-03-12T15:00:01,677Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].call - Started sending message hey {}
[INFO ] 2019-03-12T15:00:01,706Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:00:01,716Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8751793502832326178). {}
[INFO ] 2019-03-12T15:00:01,734Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3664034033216696388). {invocation_id=f449b0f7-aa1d-4a06-a34a-35939a65c1f8, invocation_timestamp=2019-03-12T15:00:01.733Z, session_id=f449b0f7-aa1d-4a06-a34a-35939a65c1f8, session_timestamp=2019-03-12T15:00:01.733Z}
[INFO ] 2019-03-12T15:00:01,755Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8751793502832326178). {invocation_id=6b3fcb4f-0b0f-4271-8877-bd1143c91b14, invocation_timestamp=2019-03-12T15:00:01.754Z, session_id=6b3fcb4f-0b0f-4271-8877-bd1143c91b14, session_timestamp=2019-03-12T15:00:01.754Z}
[INFO ] 2019-03-12T15:00:01,842Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T15:00:01,895Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4047454695951198227). {}
[INFO ] 2019-03-12T15:00:01,912Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4047454695951198227). {invocation_id=025ab82d-452a-49a3-bcba-ead525ec95d1, invocation_timestamp=2019-03-12T15:00:01.911Z, session_id=025ab82d-452a-49a3-bcba-ead525ec95d1, session_timestamp=2019-03-12T15:00:01.911Z}
[INFO ] 2019-03-12T15:00:01,930Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T15:00:01,941Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7952280375618374051). {}
[INFO ] 2019-03-12T15:00:01,950Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7952280375618374051). {invocation_id=1130330d-2b0f-4524-ad18-1054324a0424, invocation_timestamp=2019-03-12T15:00:01.949Z, session_id=1130330d-2b0f-4524-ad18-1054324a0424, session_timestamp=2019-03-12T15:00:01.949Z}
[INFO ] 2019-03-12T15:00:01,957Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:00:01,968Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4309719552884736926). {}
[INFO ] 2019-03-12T15:00:01,976Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4309719552884736926). {invocation_id=c56ddf10-e85b-45a1-9040-bd26e8bed5d3, invocation_timestamp=2019-03-12T15:00:01.975Z, session_id=c56ddf10-e85b-45a1-9040-bd26e8bed5d3, session_timestamp=2019-03-12T15:00:01.975Z}
[INFO ] 2019-03-12T15:00:01,976Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:00:01,988Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2136340901040443196). {}
[INFO ] 2019-03-12T15:00:02,011Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2136340901040443196). {invocation_id=9d24a24b-a5e0-4a81-bcd6-498d2b22523e, invocation_timestamp=2019-03-12T15:00:02.010Z, session_id=9d24a24b-a5e0-4a81-bcd6-498d2b22523e, session_timestamp=2019-03-12T15:00:02.010Z}
[INFO ] 2019-03-12T15:00:02,015Z [Mock node 1 thread] flow.[5709eecc-a48c-4826-a104-ce2929d2c62e].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T15:00:02,035Z [Mock node 1 thread] flow.[4fe0ea32-3a4e-4af7-a9c1-4eb77b0f43d4].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:00:02,039Z [Mock node 1 thread] flow.[737ccbe6-86af-4e90-ae27-73997d6e4dcd].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:00:02,043Z [Mock node 1 thread] flow.[66cd02ff-f81e-4db8-97a9-59c91362e1a5].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:00:02,055Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:00:02,052Z [Mock node 2 thread] flow.[0eb7c987-0696-431c-9b2d-5914c89693ba].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T15:00:02,074Z [Mock node 2 thread] flow.[0eb7c987-0696-431c-9b2d-5914c89693ba].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T15:00:02,080Z [Mock node 2 thread] flow.[0eb7c987-0696-431c-9b2d-5914c89693ba].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6020756420256515447). {}
[INFO ] 2019-03-12T15:00:02,089Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6020756420256515447). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=6fc9dfff-bb9a-4602-baff-cbd9e991005a, invocation_timestamp=2019-03-12T15:00:02.087Z, session_id=6fc9dfff-bb9a-4602-baff-cbd9e991005a, session_timestamp=2019-03-12T15:00:02.087Z}
[INFO ] 2019-03-12T15:00:02,136Z [Mock node 2 thread] flow.[0eb7c987-0696-431c-9b2d-5914c89693ba].call - Suspending to finalise I got your message Thanks {}
[INFO ] 2019-03-12T15:00:02,145Z [Mock node 2 thread] flow.[0eb7c987-0696-431c-9b2d-5914c89693ba].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=663587296956225208). {}
[INFO ] 2019-03-12T15:45:50,689Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-9c237eb9-e20f-4c09-95b8-383693fa9d71.jar {}
[INFO ] 2019-03-12T15:45:50,715Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-5eef3796-5e1e-4ee6-9268-c53866768e59.jar {}
[INFO ] 2019-03-12T15:45:50,759Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-9c237eb9-e20f-4c09-95b8-383693fa9d71.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5eef3796-5e1e-4ee6-9268-c53866768e59.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:45:50,792Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:45:50,796Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:45:50,810Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-9c237eb9-e20f-4c09-95b8-383693fa9d71.jar {}
[INFO ] 2019-03-12T15:45:50,841Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5eef3796-5e1e-4ee6-9268-c53866768e59.jar {}
[INFO ] 2019-03-12T15:45:50,975Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T15:45:51,616Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:45:51,662Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:45:51,665Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:45:53,673Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:45:54,182Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:45:54,184Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:54,287Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,289Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,448Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C396E3D7F7A45F52ADC7D60554B32A0ACFA2643C99B4BEC04941CF809E5C953C {}
[WARN ] 2019-03-12T15:45:54,453Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:45:54,542Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:45:54,663Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:45:54,673Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:45:54,717Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A2D5E7C7359A1007E44C9BC68D0D0F3E5325D7E100DBD53F21C626450DFF7398, not inserting the second time {}
[INFO ] 2019-03-12T15:45:54,781Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,801Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:54,802Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,803Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,806Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:54,807Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:54,813Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:45:54,814Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:45:54,834Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:45:54,845Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T15:45:54,858Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:45:54,860Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:54,862Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:54,982Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:54,993Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:45:54,994Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:54,999Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,004Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,006Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,062Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C396E3D7F7A45F52ADC7D60554B32A0ACFA2643C99B4BEC04941CF809E5C953C {}
[WARN ] 2019-03-12T15:45:55,064Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:45:55,072Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:45:55,073Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:45:55,085Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 74153B1ACF1CF7A0A77913359D10F2B062C2B0CAC823543A473C89BD08C67015, not inserting the second time {}
[INFO ] 2019-03-12T15:45:55,095Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:55,097Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,109Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:55,111Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,113Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,126Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,127Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,133Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:55,134Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,136Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,138Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:55,139Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,143Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:45:55,144Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:45:55,164Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:45:55,173Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T15:45:55,183Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:45:55,186Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:55,188Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:55,271Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:45:55,280Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:45:55,281Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,289Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,294Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,356Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment C396E3D7F7A45F52ADC7D60554B32A0ACFA2643C99B4BEC04941CF809E5C953C {}
[WARN ] 2019-03-12T15:45:55,357Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:45:55,367Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:45:55,369Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:45:55,380Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 76E990EB8659342C838774501AA91BB1EC04C4764E8AA0816FDB8E93EACADC9B, not inserting the second time {}
[INFO ] 2019-03-12T15:45:55,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:55,392Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,402Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405554184) {}
[INFO ] 2019-03-12T15:45:55,403Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,405Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,413Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,414Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,417Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,425Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405554994) {}
[INFO ] 2019-03-12T15:45:55,427Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,429Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:45:55,441Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,442Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,446Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:55,447Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,448Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:45:55,449Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:45:55,451Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405555281) {}
[INFO ] 2019-03-12T15:46:38,346Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-7f7f73b4-68d5-4907-aaed-8f5eb0422c5c.jar {}
[INFO ] 2019-03-12T15:46:38,375Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-5938cf01-407b-4f4c-9c65-7c29da911642.jar {}
[INFO ] 2019-03-12T15:46:38,420Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7f7f73b4-68d5-4907-aaed-8f5eb0422c5c.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5938cf01-407b-4f4c-9c65-7c29da911642.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:46:38,452Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:46:38,457Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:46:38,471Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7f7f73b4-68d5-4907-aaed-8f5eb0422c5c.jar {}
[INFO ] 2019-03-12T15:46:38,501Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5938cf01-407b-4f4c-9c65-7c29da911642.jar {}
[INFO ] 2019-03-12T15:46:38,628Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T15:46:39,268Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:46:39,313Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:46:39,316Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:46:41,371Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:46:41,979Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:46:41,984Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:41,995Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:42,091Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,093Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,239Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T15:46:42,245Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:46:42,335Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:46:42,462Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:46:42,472Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:46:42,516Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 31FE282F6C25508019F089E2BE9DABD44CD6883655F75587981A17E263D2ECB2, not inserting the second time {}
[INFO ] 2019-03-12T15:46:42,576Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,598Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:42,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,604Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:42,605Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,610Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:46:42,612Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:46:42,630Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:46:42,641Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T15:46:42,652Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:46:42,654Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:42,655Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:42,793Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:42,805Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:46:42,807Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,812Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:42,820Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,822Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,884Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T15:46:42,887Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:46:42,902Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:46:42,905Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:46:42,925Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C0DF36DBC2A014FE7FECC229336A33A2A2F0B9095EFDBE92352F943FB4218E5F, not inserting the second time {}
[INFO ] 2019-03-12T15:46:42,937Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,942Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:42,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:42,958Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,962Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:42,976Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,978Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,986Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:42,989Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,991Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,992Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:42,993Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:42,996Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:46:42,997Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:46:43,014Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:46:43,022Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T15:46:43,032Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:46:43,034Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:43,036Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:43,136Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:46:43,147Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:46:43,151Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,156Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:43,163Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,164Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,221Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 5A70801E749ADBFF04B8A3D53FFD8C2EFE281F0F7904308BA0A5C91E330EB7D9 {}
[WARN ] 2019-03-12T15:46:43,223Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:46:43,231Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:46:43,232Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:46:43,241Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 618E4FD556B89816E473C35275760C968A925A1F365ABC69D8D58E8A8EB9DB8A, not inserting the second time {}
[INFO ] 2019-03-12T15:46:43,248Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:43,250Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:43,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405601984) {}
[INFO ] 2019-03-12T15:46:43,260Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,262Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:43,270Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,271Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:43,274Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:43,282Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405602807) {}
[INFO ] 2019-03-12T15:46:43,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,287Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:46:43,297Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,298Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,304Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:43,306Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,306Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,307Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:46:43,308Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405603150) {}
[INFO ] 2019-03-12T15:46:43,728Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].call - Started sending message hey {}
[INFO ] 2019-03-12T15:46:43,907Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:46:43,973Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1516991741864521527). {}
[INFO ] 2019-03-12T15:46:44,042Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:46:44,071Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T15:46:44,076Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4731731570170068817). {}
[INFO ] 2019-03-12T15:46:44,084Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T15:46:44,064Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1516991741864521527). {invocation_id=0db6e879-45b7-4872-aff8-67fbd14c507b, invocation_timestamp=2019-03-12T15:46:44.056Z, session_id=0db6e879-45b7-4872-aff8-67fbd14c507b, session_timestamp=2019-03-12T15:46:44.056Z}
[INFO ] 2019-03-12T15:46:44,111Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T15:46:44,117Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1152337016224198858). {}
[INFO ] 2019-03-12T15:46:44,124Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4731731570170068817). {invocation_id=7b7114e5-3035-4f75-ab3c-11d020eb860f, invocation_timestamp=2019-03-12T15:46:44.123Z, session_id=7b7114e5-3035-4f75-ab3c-11d020eb860f, session_timestamp=2019-03-12T15:46:44.123Z}
[INFO ] 2019-03-12T15:46:44,123Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].call - Started sending message hey {}
[INFO ] 2019-03-12T15:46:44,149Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:46:44,157Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8605165596753510693). {}
[INFO ] 2019-03-12T15:46:44,173Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1152337016224198858). {invocation_id=4d93303c-8682-455a-b1b9-1b955c78710d, invocation_timestamp=2019-03-12T15:46:44.172Z, session_id=4d93303c-8682-455a-b1b9-1b955c78710d, session_timestamp=2019-03-12T15:46:44.172Z}
[INFO ] 2019-03-12T15:46:44,192Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8605165596753510693). {invocation_id=1680610b-1749-4cdf-84e0-ca284cd897a9, invocation_timestamp=2019-03-12T15:46:44.191Z, session_id=1680610b-1749-4cdf-84e0-ca284cd897a9, session_timestamp=2019-03-12T15:46:44.191Z}
[INFO ] 2019-03-12T15:46:44,296Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:46:44,352Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8530267353256981511). {}
[INFO ] 2019-03-12T15:46:44,369Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8530267353256981511). {invocation_id=cb7e98ff-466b-4b63-bb51-bc7b81d0e898, invocation_timestamp=2019-03-12T15:46:44.368Z, session_id=cb7e98ff-466b-4b63-bb51-bc7b81d0e898, session_timestamp=2019-03-12T15:46:44.368Z}
[INFO ] 2019-03-12T15:46:44,384Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T15:46:44,395Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8783710677741827938). {}
[INFO ] 2019-03-12T15:46:44,405Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8783710677741827938). {invocation_id=e953438c-a1c9-4d6e-aa80-53027f0fb564, invocation_timestamp=2019-03-12T15:46:44.404Z, session_id=e953438c-a1c9-4d6e-aa80-53027f0fb564, session_timestamp=2019-03-12T15:46:44.404Z}
[INFO ] 2019-03-12T15:46:44,411Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T15:46:44,422Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8476853383678513394). {}
[INFO ] 2019-03-12T15:46:44,444Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8476853383678513394). {invocation_id=9a719436-413d-4454-9e9f-ab6d4fec55ea, invocation_timestamp=2019-03-12T15:46:44.443Z, session_id=9a719436-413d-4454-9e9f-ab6d4fec55ea, session_timestamp=2019-03-12T15:46:44.443Z}
[INFO ] 2019-03-12T15:46:44,444Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:46:44,455Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2036628118250721077). {}
[INFO ] 2019-03-12T15:46:44,466Z [Mock node 1 thread] flow.[031e90a7-84fe-4a37-b313-ec33832dbdce].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:46:44,467Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2036628118250721077). {invocation_id=41718324-d4fb-446f-8052-a886335f79d1, invocation_timestamp=2019-03-12T15:46:44.466Z, session_id=41718324-d4fb-446f-8052-a886335f79d1, session_timestamp=2019-03-12T15:46:44.466Z}
[INFO ] 2019-03-12T15:46:44,490Z [Mock node 1 thread] flow.[1e9ea2c3-c4fb-48b8-8d77-69df1b866266].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:46:44,493Z [Mock node 1 thread] flow.[0c980eff-87e0-4cf1-ae06-f7afd274b4f3].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T15:46:44,497Z [Mock node 1 thread] flow.[38510597-7e82-4619-a88d-61fdb5ab2299].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:46:44,511Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:46:44,508Z [Mock node 2 thread] flow.[7cff1b3b-9f58-4c63-bf58-1af4b39a07d3].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T15:46:44,531Z [Mock node 2 thread] flow.[7cff1b3b-9f58-4c63-bf58-1af4b39a07d3].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T15:46:44,535Z [Mock node 2 thread] flow.[7cff1b3b-9f58-4c63-bf58-1af4b39a07d3].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2957786825740411221). {}
[INFO ] 2019-03-12T15:46:44,542Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2957786825740411221). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=c3072d86-60dc-4e19-98ed-9b4266d2c202, invocation_timestamp=2019-03-12T15:46:44.541Z, session_id=c3072d86-60dc-4e19-98ed-9b4266d2c202, session_timestamp=2019-03-12T15:46:44.541Z}
[INFO ] 2019-03-12T15:46:44,587Z [Mock node 2 thread] flow.[7cff1b3b-9f58-4c63-bf58-1af4b39a07d3].call - Suspending to finalise I got your message Thanks {}
[INFO ] 2019-03-12T15:46:44,594Z [Mock node 2 thread] flow.[7cff1b3b-9f58-4c63-bf58-1af4b39a07d3].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8033844641519793705). {}
[INFO ] 2019-03-12T15:49:25,528Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-846a874f-2091-4130-ad53-4609dc7169fb.jar {}
[INFO ] 2019-03-12T15:49:25,558Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ca97ab8b-3b22-4caa-85e2-79fc26e1bc0d.jar {}
[INFO ] 2019-03-12T15:49:25,605Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-846a874f-2091-4130-ad53-4609dc7169fb.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ca97ab8b-3b22-4caa-85e2-79fc26e1bc0d.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:49:25,641Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:49:25,645Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:49:25,660Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-846a874f-2091-4130-ad53-4609dc7169fb.jar {}
[INFO ] 2019-03-12T15:49:25,690Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ca97ab8b-3b22-4caa-85e2-79fc26e1bc0d.jar {}
[INFO ] 2019-03-12T15:49:25,805Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4193da4d {}
[INFO ] 2019-03-12T15:49:26,495Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:49:26,549Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:49:26,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:49:28,638Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:49:29,147Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:49:29,149Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,159Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:29,254Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,256Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,405Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:49:29,414Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:49:29,503Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:49:29,620Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:49:29,630Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:49:29,673Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 58BC7ADF274D4454F5F2E3A5139B2846DE40B8374CA67F2CF40BFF954DB5F783, not inserting the second time {}
[INFO ] 2019-03-12T15:49:29,739Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,759Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:29,761Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,762Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,764Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:29,767Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:29,772Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:49:29,773Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:49:29,793Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:49:29,803Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@379ddfda {}
[INFO ] 2019-03-12T15:49:29,813Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:49:29,815Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:29,817Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:29,935Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:29,944Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:49:29,945Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:29,950Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:29,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:29,957Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,016Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:49:30,018Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:49:30,027Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:49:30,029Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:49:30,041Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EC9DE4CC74F1A5A7C02D1116293F810D0C7D62B5AF0428ABCBA6747AD8124D05, not inserting the second time {}
[INFO ] 2019-03-12T15:49:30,051Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:30,053Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,066Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:30,067Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,071Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,083Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,085Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,090Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:30,092Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,095Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,096Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:30,098Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,101Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:49:30,103Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:49:30,125Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:49:30,136Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7edad7d2 {}
[INFO ] 2019-03-12T15:49:30,148Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:49:30,150Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:30,151Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:30,247Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:49:30,298Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:49:30,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,306Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,312Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,314Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,372Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:49:30,374Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:49:30,383Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:49:30,384Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:49:30,393Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FB6220C6CC3A22CFDD48A4A65D6F792BE755D75BAC2EE4598135A7FD31AF2B8A, not inserting the second time {}
[INFO ] 2019-03-12T15:49:30,400Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:30,403Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,412Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405769149) {}
[INFO ] 2019-03-12T15:49:30,413Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,415Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,423Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,424Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,427Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,434Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405769945) {}
[INFO ] 2019-03-12T15:49:30,436Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,438Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:49:30,446Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,447Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,452Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:30,453Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,455Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,456Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:49:30,458Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405770300) {}
[INFO ] 2019-03-12T15:49:30,896Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T15:49:31,074Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T15:49:31,139Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=19972321659988386). {}
[INFO ] 2019-03-12T15:49:31,210Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].call - Started sending message hey {}
[INFO ] 2019-03-12T15:49:31,238Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:49:31,244Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2427668599381788939). {}
[INFO ] 2019-03-12T15:49:31,253Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:49:31,232Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=19972321659988386). {invocation_id=131b0407-9b98-416f-8e94-d88ed97a8b01, invocation_timestamp=2019-03-12T15:49:31.224Z, session_id=131b0407-9b98-416f-8e94-d88ed97a8b01, session_timestamp=2019-03-12T15:49:31.224Z}
[INFO ] 2019-03-12T15:49:31,276Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T15:49:31,282Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3564974690034000437). {}
[INFO ] 2019-03-12T15:49:31,293Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2427668599381788939). {invocation_id=351c7899-8291-40b1-8cfc-a59126b68fc0, invocation_timestamp=2019-03-12T15:49:31.292Z, session_id=351c7899-8291-40b1-8cfc-a59126b68fc0, session_timestamp=2019-03-12T15:49:31.292Z}
[INFO ] 2019-03-12T15:49:31,290Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].call - Started sending message hey {}
[INFO ] 2019-03-12T15:49:31,318Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:49:31,325Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5953035823860464202). {}
[INFO ] 2019-03-12T15:49:31,356Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3564974690034000437). {invocation_id=66fadd20-9d8a-4f3d-8029-1f7a6941fccb, invocation_timestamp=2019-03-12T15:49:31.356Z, session_id=66fadd20-9d8a-4f3d-8029-1f7a6941fccb, session_timestamp=2019-03-12T15:49:31.356Z}
[INFO ] 2019-03-12T15:49:31,383Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5953035823860464202). {invocation_id=76241677-43da-4ac1-b073-b6d67d76645d, invocation_timestamp=2019-03-12T15:49:31.382Z, session_id=76241677-43da-4ac1-b073-b6d67d76645d, session_timestamp=2019-03-12T15:49:31.382Z}
[INFO ] 2019-03-12T15:49:31,479Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T15:49:31,534Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6209814595386771309). {}
[INFO ] 2019-03-12T15:49:31,551Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6209814595386771309). {invocation_id=489dfac6-2adf-4c5e-bb47-f20fb1faa495, invocation_timestamp=2019-03-12T15:49:31.551Z, session_id=489dfac6-2adf-4c5e-bb47-f20fb1faa495, session_timestamp=2019-03-12T15:49:31.551Z}
[INFO ] 2019-03-12T15:49:31,576Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:49:31,591Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7711666211510135350). {}
[INFO ] 2019-03-12T15:49:31,605Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7711666211510135350). {invocation_id=2a798979-6dde-48bc-8a61-0e507bfc3a92, invocation_timestamp=2019-03-12T15:49:31.605Z, session_id=2a798979-6dde-48bc-8a61-0e507bfc3a92, session_timestamp=2019-03-12T15:49:31.605Z}
[INFO ] 2019-03-12T15:49:31,607Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T15:49:31,619Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1535563447027908993). {}
[INFO ] 2019-03-12T15:49:31,632Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T15:49:31,634Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1535563447027908993). {invocation_id=98ee0a96-2ead-4671-be18-26898ff93e75, invocation_timestamp=2019-03-12T15:49:31.633Z, session_id=98ee0a96-2ead-4671-be18-26898ff93e75, session_timestamp=2019-03-12T15:49:31.633Z}
[INFO ] 2019-03-12T15:49:31,643Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1359502057930074214). {}
[INFO ] 2019-03-12T15:49:31,659Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1359502057930074214). {invocation_id=ecc11945-9c93-4cff-bbbd-a27aae1c83fa, invocation_timestamp=2019-03-12T15:49:31.658Z, session_id=ecc11945-9c93-4cff-bbbd-a27aae1c83fa, session_timestamp=2019-03-12T15:49:31.658Z}
[INFO ] 2019-03-12T15:49:31,661Z [Mock node 1 thread] flow.[39db818a-c1fa-4092-9cf5-8b758a0f6481].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T15:49:31,671Z [Mock node 1 thread] flow.[1951eff4-e400-459a-9bb9-1d9e5baf9ae0].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:49:31,677Z [Mock node 1 thread] flow.[ec254fed-47f4-4797-94bc-19cd709c634e].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T15:49:31,680Z [Mock node 1 thread] flow.[d55def46-2ed8-4b7e-b3a2-3f5d84f9dd7c].call - Finished sending message hey {}
[INFO ] 2019-03-12T15:49:31,695Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:49:31,688Z [Mock node 2 thread] flow.[790164b8-08d2-43a4-bbe5-8aba30588db0].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T15:49:31,714Z [Mock node 2 thread] flow.[790164b8-08d2-43a4-bbe5-8aba30588db0].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T15:49:31,720Z [Mock node 2 thread] flow.[790164b8-08d2-43a4-bbe5-8aba30588db0].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3941025462193125978). {}
[INFO ] 2019-03-12T15:49:31,729Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3941025462193125978). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=d9974107-c705-4459-be8e-721a48df881c, invocation_timestamp=2019-03-12T15:49:31.727Z, session_id=d9974107-c705-4459-be8e-721a48df881c, session_timestamp=2019-03-12T15:49:31.727Z}
[INFO ] 2019-03-12T15:49:31,778Z [Mock node 2 thread] flow.[790164b8-08d2-43a4-bbe5-8aba30588db0].call - Suspending to finalise I got your message Thanks {}
[INFO ] 2019-03-12T15:49:31,786Z [Mock node 2 thread] flow.[790164b8-08d2-43a4-bbe5-8aba30588db0].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9046211996561343633). {}
[INFO ] 2019-03-12T15:51:55,689Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-d8573637-9f42-4d96-8372-717f073bb011.jar {}
[INFO ] 2019-03-12T15:51:55,716Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-8c59709c-1d4f-4016-8494-bd423205460e.jar {}
[INFO ] 2019-03-12T15:51:55,762Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d8573637-9f42-4d96-8372-717f073bb011.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8c59709c-1d4f-4016-8494-bd423205460e.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:51:55,793Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:51:55,797Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:51:55,810Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d8573637-9f42-4d96-8372-717f073bb011.jar {}
[INFO ] 2019-03-12T15:51:55,841Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8c59709c-1d4f-4016-8494-bd423205460e.jar {}
[INFO ] 2019-03-12T15:51:55,960Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T15:51:56,575Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:51:56,614Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:51:56,618Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:51:58,573Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:51:59,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:51:59,078Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,088Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:51:59,179Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,181Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,326Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:51:59,332Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:51:59,422Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:51:59,538Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:51:59,548Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:51:59,592Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2653404617A4B815A155B490C099EEF09EBB6E4634F27C07A5E50568D1F35948, not inserting the second time {}
[INFO ] 2019-03-12T15:51:59,658Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,678Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:51:59,679Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,681Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,682Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:51:59,684Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,690Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:51:59,691Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:51:59,708Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:51:59,721Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T15:51:59,734Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:51:59,737Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:51:59,739Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:51:59,860Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:51:59,869Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:51:59,871Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,875Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:51:59,880Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,881Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,933Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:51:59,935Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:51:59,944Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:51:59,945Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:51:59,955Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BFC237D85D3E9F802AE50A064FD00E08DD84CAA02742FB359DEA48247C6F46C5, not inserting the second time {}
[INFO ] 2019-03-12T15:51:59,963Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,967Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:51:59,975Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:51:59,977Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,979Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:51:59,990Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,992Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:51:59,997Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:51:59,999Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:52:00,001Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:52:00,003Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:52:00,004Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:52:00,007Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:52:00,008Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:52:00,027Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:52:00,037Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T15:52:00,047Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:52:00,049Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:52:00,051Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:52:00,138Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:52:00,146Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:52:00,147Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,151Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:52:00,156Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,157Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,216Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:52:00,308Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:52:00,323Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:52:00,324Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:52:00,334Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B78AA72BE5AC44C5FA757BB633B3404D48F66BE70BDD9A9F016D52253C0EB40D, not inserting the second time {}
[INFO ] 2019-03-12T15:52:00,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:52:00,347Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:52:00,359Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552405919078) {}
[INFO ] 2019-03-12T15:52:00,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,374Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:52:00,384Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:52:00,388Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:52:00,396Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552405919871) {}
[INFO ] 2019-03-12T15:52:00,398Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,400Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:52:00,409Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,414Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:52:00,415Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,416Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,417Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:52:00,418Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552405920147) {}
[INFO ] 2019-03-12T15:52:00,859Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:52:00,852Z [Mock node 1 thread] flow.[1840a8a5-4942-461e-9a7b-79829c05cf6b].call - Started sending message hey {}
[INFO ] 2019-03-12T15:52:01,046Z [Mock node 1 thread] flow.[1840a8a5-4942-461e-9a7b-79829c05cf6b].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:52:01,114Z [Mock node 1 thread] flow.[1840a8a5-4942-461e-9a7b-79829c05cf6b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2398304750757624739). {}
[INFO ] 2019-03-12T15:52:01,184Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2398304750757624739). {invocation_id=764cb98d-3c4c-4fd6-93b0-325626a3bbd3, invocation_timestamp=2019-03-12T15:52:01.177Z, session_id=764cb98d-3c4c-4fd6-93b0-325626a3bbd3, session_timestamp=2019-03-12T15:52:01.177Z}
[WARN ] 2019-03-12T15:52:01,223Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=2398304750757624739), initiationEntropy=7075831133831826436, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=764cb98d-3c4c-4fd6-93b0-325626a3bbd3, invocation_timestamp=2019-03-12T15:52:01.177Z, session_id=764cb98d-3c4c-4fd6-93b0-325626a3bbd3, session_timestamp=2019-03-12T15:52:01.177Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@362d4c2b rejected from java.util.concurrent.ThreadPoolExecutor@96c00ee[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T15:55:42,951Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-3583add5-7eee-4340-87bb-89c526998284.jar {}
[INFO ] 2019-03-12T15:55:42,978Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a92ab7ea-48d7-4801-ad14-22ae5311c2f8.jar {}
[INFO ] 2019-03-12T15:55:43,024Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3583add5-7eee-4340-87bb-89c526998284.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a92ab7ea-48d7-4801-ad14-22ae5311c2f8.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:55:43,058Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:55:43,061Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:55:43,074Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3583add5-7eee-4340-87bb-89c526998284.jar {}
[INFO ] 2019-03-12T15:55:43,106Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a92ab7ea-48d7-4801-ad14-22ae5311c2f8.jar {}
[INFO ] 2019-03-12T15:55:43,225Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T15:55:43,851Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:55:43,892Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:55:43,895Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:55:45,880Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:55:46,398Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:55:46,400Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:46,411Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:46,505Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:46,508Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:46,658Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:55:46,664Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:55:46,750Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:55:46,864Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:55:46,876Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:55:46,921Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 993503138E01872EE2BEF4DE09F92ABC85C12D636378C1DB766E2D58DB307C4F, not inserting the second time {}
[INFO ] 2019-03-12T15:55:46,984Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,006Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,009Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,011Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,013Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,015Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,020Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:55:47,023Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:55:47,041Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:55:47,050Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T15:55:47,059Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:55:47,061Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,063Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,187Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,198Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:55:47,200Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,205Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,210Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,211Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,264Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:55:47,266Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:55:47,276Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:55:47,278Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:55:47,291Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C1DC1288F0449D9E7FD1EA116A1C191BF22E8A8352E3D0DBE78234D30B7844F9, not inserting the second time {}
[INFO ] 2019-03-12T15:55:47,301Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,305Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,318Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,319Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,322Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,336Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,338Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,345Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,350Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,352Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,354Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,356Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:55:47,358Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:55:47,379Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:55:47,390Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T15:55:47,402Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:55:47,404Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,406Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,503Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:55:47,514Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:55:47,516Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,522Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,530Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,592Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:55:47,594Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:55:47,604Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:55:47,605Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:55:47,613Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EAD2ADB66E816DCF45F2D83E578EDC3C651B22C1BF5E2BD4B3D0ABDCCCC8289A, not inserting the second time {}
[INFO ] 2019-03-12T15:55:47,621Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,624Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,632Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406146400) {}
[INFO ] 2019-03-12T15:55:47,633Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,636Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,645Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,646Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,648Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,656Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406147200) {}
[INFO ] 2019-03-12T15:55:47,657Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,659Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:55:47,668Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,670Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,675Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,677Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:47,678Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:55:47,679Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406147516) {}
[INFO ] 2019-03-12T15:55:48,071Z [Mock node 1 thread] flow.[5e446f6a-c160-416e-98d7-e4b8cab7b39f].call - Started sending message hey {}
[INFO ] 2019-03-12T15:55:48,253Z [Mock node 1 thread] flow.[5e446f6a-c160-416e-98d7-e4b8cab7b39f].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:55:48,312Z [Mock node 1 thread] flow.[5e446f6a-c160-416e-98d7-e4b8cab7b39f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=224228565452613001). {}
[INFO ] 2019-03-12T15:55:48,429Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:55:48,421Z [Mock node 1 thread] flow.[102999f7-f847-4e89-b007-419a741dda9e].call - Started sending message hey {}
[INFO ] 2019-03-12T15:55:48,400Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=224228565452613001). {invocation_id=566f1df6-f386-450a-aa44-bafbe5c9e99b, invocation_timestamp=2019-03-12T15:55:48.391Z, session_id=566f1df6-f386-450a-aa44-bafbe5c9e99b, session_timestamp=2019-03-12T15:55:48.391Z}
[INFO ] 2019-03-12T15:55:48,459Z [Mock node 1 thread] flow.[102999f7-f847-4e89-b007-419a741dda9e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:55:48,466Z [Mock node 1 thread] flow.[102999f7-f847-4e89-b007-419a741dda9e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1057519210938438278). {}
[INFO ] 2019-03-12T15:55:48,499Z [Mock node 1 thread] flow.[fcbeeca1-f962-4b17-b021-41f93abefb69].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T15:55:48,518Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1057519210938438278). {invocation_id=368975b7-acd6-43c8-a9c9-0c064c7b870f, invocation_timestamp=2019-03-12T15:55:48.518Z, session_id=368975b7-acd6-43c8-a9c9-0c064c7b870f, session_timestamp=2019-03-12T15:55:48.518Z}
[INFO ] 2019-03-12T15:55:48,531Z [Mock node 1 thread] flow.[fcbeeca1-f962-4b17-b021-41f93abefb69].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T15:55:48,537Z [Mock node 1 thread] flow.[fcbeeca1-f962-4b17-b021-41f93abefb69].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=70786906643020429). {}
[INFO ] 2019-03-12T15:55:48,549Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=70786906643020429). {invocation_id=5c9881b3-0e67-4088-b2a0-5a80b41da6e0, invocation_timestamp=2019-03-12T15:55:48.548Z, session_id=5c9881b3-0e67-4088-b2a0-5a80b41da6e0, session_timestamp=2019-03-12T15:55:48.548Z}
[INFO ] 2019-03-12T15:56:57,667Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-177b2745-0f39-432f-a293-7629f32d4e8d.jar {}
[INFO ] 2019-03-12T15:56:57,694Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-b041b2a4-91a8-4170-9afd-3443748fc877.jar {}
[INFO ] 2019-03-12T15:56:57,738Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-177b2745-0f39-432f-a293-7629f32d4e8d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b041b2a4-91a8-4170-9afd-3443748fc877.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T15:56:57,770Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:56:57,774Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:56:57,786Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-177b2745-0f39-432f-a293-7629f32d4e8d.jar {}
[INFO ] 2019-03-12T15:56:57,819Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b041b2a4-91a8-4170-9afd-3443748fc877.jar {}
[INFO ] 2019-03-12T15:56:57,942Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T15:56:58,547Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:56:58,591Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:56:58,595Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:57:00,562Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T15:57:01,066Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:57:01,068Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,078Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:01,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,172Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,319Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:57:01,327Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:57:01,413Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T15:57:01,534Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:57:01,543Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:57:01,587Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D94D20A80BEEE2FFEDF68200002A0735CBC78C21EF0D4C0E9FA329CE0AF98FA0, not inserting the second time {}
[INFO ] 2019-03-12T15:57:01,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,675Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:01,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,680Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:01,682Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,687Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:57:01,689Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:57:01,708Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:57:01,717Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T15:57:01,729Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:57:01,731Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:01,733Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:01,856Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:01,868Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:57:01,869Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:01,875Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:01,880Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:01,881Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:01,938Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:57:01,940Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:57:01,951Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:57:01,953Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:57:01,965Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1AB7371ABEFF8818C458833E0298CD6552F87FE053BED6CF7A113B862189651D, not inserting the second time {}
[INFO ] 2019-03-12T15:57:01,973Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,978Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:01,988Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:01,989Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:01,993Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,005Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,007Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,015Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:02,017Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,019Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,020Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:02,022Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,027Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T15:57:02,028Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T15:57:02,052Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T15:57:02,061Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T15:57:02,071Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T15:57:02,072Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:02,074Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:02,178Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T15:57:02,187Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T15:57:02,189Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,195Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,202Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,261Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T15:57:02,264Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T15:57:02,272Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T15:57:02,274Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T15:57:02,284Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5DF80307C8A2E4765761F6CF02ADCA26A6613145194094721EFA8D51E7744FF9, not inserting the second time {}
[INFO ] 2019-03-12T15:57:02,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:02,294Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,305Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406221068) {}
[INFO ] 2019-03-12T15:57:02,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,311Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,319Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,322Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406221869) {}
[INFO ] 2019-03-12T15:57:02,332Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,334Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T15:57:02,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,343Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,348Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:02,349Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,350Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,352Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T15:57:02,353Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406222189) {}
[INFO ] 2019-03-12T15:57:02,734Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T15:57:02,727Z [Mock node 1 thread] flow.[7aad7354-bc0c-4f72-9d53-8204f4d2fedc].call - Started sending message hey {}
[INFO ] 2019-03-12T15:57:02,928Z [Mock node 1 thread] flow.[7aad7354-bc0c-4f72-9d53-8204f4d2fedc].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T15:57:02,993Z [Mock node 1 thread] flow.[7aad7354-bc0c-4f72-9d53-8204f4d2fedc].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5137923774171876856). {}
[INFO ] 2019-03-12T15:57:03,080Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5137923774171876856). {invocation_id=c261c383-c50e-4bdd-80a4-5584d1495047, invocation_timestamp=2019-03-12T15:57:03.072Z, session_id=c261c383-c50e-4bdd-80a4-5584d1495047, session_timestamp=2019-03-12T15:57:03.072Z}
[WARN ] 2019-03-12T15:57:03,119Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=5137923774171876856), initiationEntropy=-5866237872059928702, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=c261c383-c50e-4bdd-80a4-5584d1495047, invocation_timestamp=2019-03-12T15:57:03.072Z, session_id=c261c383-c50e-4bdd-80a4-5584d1495047, session_timestamp=2019-03-12T15:57:03.072Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@67d5aff8 rejected from java.util.concurrent.ThreadPoolExecutor@41ead007[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:00:39,069Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-fd88c070-4f6a-486d-876d-8822acdedaa8.jar {}
[INFO ] 2019-03-12T16:00:39,100Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-f6e04d8e-159c-4fc4-8e33-d0402403641c.jar {}
[INFO ] 2019-03-12T16:00:39,147Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-fd88c070-4f6a-486d-876d-8822acdedaa8.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-f6e04d8e-159c-4fc4-8e33-d0402403641c.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:00:39,179Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:00:39,182Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:00:39,195Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-fd88c070-4f6a-486d-876d-8822acdedaa8.jar {}
[INFO ] 2019-03-12T16:00:39,226Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-f6e04d8e-159c-4fc4-8e33-d0402403641c.jar {}
[INFO ] 2019-03-12T16:00:39,363Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@52e34db {}
[INFO ] 2019-03-12T16:00:40,008Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:00:40,051Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:00:40,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:00:42,032Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:00:42,541Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:00:42,543Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:42,554Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:42,644Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:42,646Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:42,792Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:00:42,799Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:00:42,891Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:00:43,009Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:00:43,019Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:00:43,062Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 34DB8456BB8AC66FF83E75CA52F9FCA2032D4EFFCBF4C7DA5B321C69FADC9DEA, not inserting the second time {}
[INFO ] 2019-03-12T16:00:43,125Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,145Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,150Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,151Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,157Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:00:43,158Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:00:43,178Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:00:43,190Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@54f5457e {}
[INFO ] 2019-03-12T16:00:43,201Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:00:43,203Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,205Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,324Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,334Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:00:43,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,342Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,350Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,410Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:00:43,412Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:00:43,422Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:00:43,424Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:00:43,436Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 629DD44B043D7C9981366E85141F1CA2751967678AA4A9758D4C4E0365EFA11C, not inserting the second time {}
[INFO ] 2019-03-12T16:00:43,446Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,450Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,461Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,464Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,467Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,478Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,480Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,487Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,489Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,493Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,494Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,499Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:00:43,501Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:00:43,520Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:00:43,528Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1253fada {}
[INFO ] 2019-03-12T16:00:43,539Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:00:43,541Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,542Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,629Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:00:43,639Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:00:43,640Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,643Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,649Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,651Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,710Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:00:43,712Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:00:43,723Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:00:43,724Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:00:43,734Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AD5491EB32E9B707E4DCCA2331D804B8860F769EF773FE97E6E684C9DCD5B119, not inserting the second time {}
[INFO ] 2019-03-12T16:00:43,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,744Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,753Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406442543) {}
[INFO ] 2019-03-12T16:00:43,755Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,757Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,766Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,767Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,769Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,781Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406443336) {}
[INFO ] 2019-03-12T16:00:43,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,784Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:00:43,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,794Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,799Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,800Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,801Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:43,802Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:00:43,804Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406443640) {}
[INFO ] 2019-03-12T16:00:44,200Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:00:44,193Z [Mock node 1 thread] flow.[2d999b58-a97d-48a2-801a-0f852984fd08].call - Started sending message hey {}
[INFO ] 2019-03-12T16:00:44,387Z [Mock node 1 thread] flow.[2d999b58-a97d-48a2-801a-0f852984fd08].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:00:44,457Z [Mock node 1 thread] flow.[2d999b58-a97d-48a2-801a-0f852984fd08].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1507121851094680812). {}
[INFO ] 2019-03-12T16:00:44,517Z [Mock node 1 thread] flow.[5e5d7a2f-b4c9-4f73-92aa-d3eeb0251eac].call - Started sending message hey {}
[INFO ] 2019-03-12T16:00:44,559Z [Mock node 1 thread] flow.[5e5d7a2f-b4c9-4f73-92aa-d3eeb0251eac].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:00:44,564Z [Mock node 1 thread] flow.[5e5d7a2f-b4c9-4f73-92aa-d3eeb0251eac].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=794658117598182678). {}
[INFO ] 2019-03-12T16:00:44,539Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1507121851094680812). {invocation_id=41c1a3a0-a7b4-4980-9d15-89a1dced8c52, invocation_timestamp=2019-03-12T16:00:44.531Z, session_id=41c1a3a0-a7b4-4980-9d15-89a1dced8c52, session_timestamp=2019-03-12T16:00:44.531Z}
[WARN ] 2019-03-12T16:00:44,585Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-1507121851094680812), initiationEntropy=-370497380478189778, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=41c1a3a0-a7b4-4980-9d15-89a1dced8c52, invocation_timestamp=2019-03-12T16:00:44.531Z, session_id=41c1a3a0-a7b4-4980-9d15-89a1dced8c52, session_timestamp=2019-03-12T16:00:44.531Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@222a2ec3 rejected from java.util.concurrent.ThreadPoolExecutor@5ee06a5[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:00:44,605Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=794658117598182678). {invocation_id=06291686-c049-45d8-81cc-6ed2be10e880, invocation_timestamp=2019-03-12T16:00:44.604Z, session_id=06291686-c049-45d8-81cc-6ed2be10e880, session_timestamp=2019-03-12T16:00:44.604Z}
[WARN ] 2019-03-12T16:00:44,608Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=794658117598182678), initiationEntropy=2998573997909858803, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=06291686-c049-45d8-81cc-6ed2be10e880, invocation_timestamp=2019-03-12T16:00:44.604Z, session_id=06291686-c049-45d8-81cc-6ed2be10e880, session_timestamp=2019-03-12T16:00:44.604Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@6cdca15d rejected from java.util.concurrent.ThreadPoolExecutor@5ee06a5[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:01:31,720Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-14727e5e-68af-4f4b-b19c-62420bec57d3.jar {}
[INFO ] 2019-03-12T16:01:31,747Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-8a78f775-adbe-4afd-b5e4-79c3b7be51da.jar {}
[INFO ] 2019-03-12T16:01:31,794Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-14727e5e-68af-4f4b-b19c-62420bec57d3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8a78f775-adbe-4afd-b5e4-79c3b7be51da.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:01:31,823Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:01:31,828Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:01:31,840Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-14727e5e-68af-4f4b-b19c-62420bec57d3.jar {}
[INFO ] 2019-03-12T16:01:31,871Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8a78f775-adbe-4afd-b5e4-79c3b7be51da.jar {}
[INFO ] 2019-03-12T16:01:31,985Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:01:32,585Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:01:32,626Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:01:32,629Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:01:34,598Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:01:35,112Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:01:35,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,125Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:35,218Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,220Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,374Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:01:35,380Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:01:35,468Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:01:35,579Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:01:35,589Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:01:35,631Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AE8A6AD4138CC087358D1D3EF877F3B7BF4943F88EEFDDFAF4AE308EE480A65B, not inserting the second time {}
[INFO ] 2019-03-12T16:01:35,699Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,718Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:35,720Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,722Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,724Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:35,725Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:35,732Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:01:35,733Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:01:35,754Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:01:35,763Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T16:01:35,774Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:01:35,776Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:35,778Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:35,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:35,911Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:01:35,913Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:35,917Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:35,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:35,924Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:35,980Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:01:35,982Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:01:35,992Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:01:35,994Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:01:36,006Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7AB56BB62A128A1D3D372A5846F1EEB822263597C128C73F0AC5881C0FB68DF0, not inserting the second time {}
[INFO ] 2019-03-12T16:01:36,014Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:36,018Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,033Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:36,034Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,038Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,052Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,061Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:36,063Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,064Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,066Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:36,068Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,073Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:01:36,075Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:01:36,095Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:01:36,104Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T16:01:36,115Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:01:36,117Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:36,118Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:36,209Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:01:36,221Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:01:36,223Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,229Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,234Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,236Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,295Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:01:36,297Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:01:36,308Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:01:36,309Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:01:36,319Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 92FA211640A27548545D4EE866A24ACFD8DFC217A052AB5D70251137CBF053EE, not inserting the second time {}
[INFO ] 2019-03-12T16:01:36,327Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:36,332Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406495114) {}
[INFO ] 2019-03-12T16:01:36,343Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,346Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,356Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,357Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,360Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,368Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406495913) {}
[INFO ] 2019-03-12T16:01:36,369Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,371Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:01:36,381Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,382Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,386Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:36,387Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,388Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,389Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:01:36,390Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406496223) {}
[INFO ] 2019-03-12T16:01:36,400Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:03:35,209Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-5883f0e2-6321-4fbb-b0c0-984af32954c3.jar {}
[INFO ] 2019-03-12T16:03:35,240Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a6b90388-d0ac-4dca-9b2b-451e67dcb9e1.jar {}
[INFO ] 2019-03-12T16:03:35,289Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5883f0e2-6321-4fbb-b0c0-984af32954c3.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a6b90388-d0ac-4dca-9b2b-451e67dcb9e1.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:03:35,321Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:03:35,325Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:03:35,337Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-5883f0e2-6321-4fbb-b0c0-984af32954c3.jar {}
[INFO ] 2019-03-12T16:03:35,367Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a6b90388-d0ac-4dca-9b2b-451e67dcb9e1.jar {}
[INFO ] 2019-03-12T16:03:35,499Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@554a2f3 {}
[INFO ] 2019-03-12T16:03:36,135Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:03:36,184Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:03:36,188Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:03:38,337Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:03:38,872Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:03:38,875Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:38,886Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:38,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:38,987Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,140Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:03:39,146Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:03:39,234Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:03:39,348Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:03:39,359Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:03:39,404Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 4EBF9595715C17613DFCEF469310AF1947070A75FFE211B50EC1BC801DEDB008, not inserting the second time {}
[INFO ] 2019-03-12T16:03:39,474Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,493Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:39,495Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,497Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,499Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:39,501Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,507Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:03:39,509Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:03:39,531Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:03:39,542Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@38ffba03 {}
[INFO ] 2019-03-12T16:03:39,554Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:03:39,556Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:39,558Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:39,684Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:39,692Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:03:39,693Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,698Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:39,703Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,704Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,763Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:03:39,766Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:03:39,778Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:03:39,779Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:03:39,790Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E3E4AA1857EAC0CD66914691A101B4AE38DFAA87D173C8485599611AFBB2C2B1, not inserting the second time {}
[INFO ] 2019-03-12T16:03:39,801Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,804Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:39,817Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:39,819Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,822Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:39,836Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,837Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,847Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:39,849Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,851Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,852Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:39,854Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:39,860Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:03:39,861Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:03:39,878Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:03:39,887Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@446dcab3 {}
[INFO ] 2019-03-12T16:03:39,897Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:03:39,898Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:39,899Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:39,989Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:03:40,000Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:03:40,002Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,008Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:40,014Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,016Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,072Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:03:40,074Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:03:40,084Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:03:40,085Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:03:40,093Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F08249300461FBCA97EB56176F414DE93188C7AE36B584D5CEA8FACBF3F4A5DC, not inserting the second time {}
[INFO ] 2019-03-12T16:03:40,100Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:40,103Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:40,112Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406618874) {}
[INFO ] 2019-03-12T16:03:40,113Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,116Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:40,125Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,126Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:40,128Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:40,138Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406619693) {}
[INFO ] 2019-03-12T16:03:40,140Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,143Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:03:40,152Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,154Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,158Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:40,159Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,160Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,161Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:03:40,162Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406620002) {}
[INFO ] 2019-03-12T16:03:40,570Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:03:40,574Z [Mock node 1 thread] flow.[f9286830-7a54-4415-b64d-514d61bc842f].call - Started sending message hey {}
[INFO ] 2019-03-12T16:03:40,776Z [Mock node 1 thread] flow.[f9286830-7a54-4415-b64d-514d61bc842f].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:03:40,852Z [Mock node 1 thread] flow.[f9286830-7a54-4415-b64d-514d61bc842f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5629142528936156601). {}
[INFO ] 2019-03-12T16:03:40,920Z [Mock node 1 thread] flow.[86ed106f-bedb-41b5-80d1-817c87ead030].call - Started sending message hey {}
[INFO ] 2019-03-12T16:03:40,956Z [Mock node 1 thread] flow.[86ed106f-bedb-41b5-80d1-817c87ead030].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:03:40,962Z [Mock node 1 thread] flow.[86ed106f-bedb-41b5-80d1-817c87ead030].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7595237450303323218). {}
[INFO ] 2019-03-12T16:03:40,939Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5629142528936156601). {invocation_id=0aca050a-9ef9-45d4-ad05-061cbaa13206, invocation_timestamp=2019-03-12T16:03:40.933Z, session_id=0aca050a-9ef9-45d4-ad05-061cbaa13206, session_timestamp=2019-03-12T16:03:40.933Z}
[WARN ] 2019-03-12T16:03:40,982Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-5629142528936156601), initiationEntropy=2817679009471785809, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=0aca050a-9ef9-45d4-ad05-061cbaa13206, invocation_timestamp=2019-03-12T16:03:40.933Z, session_id=0aca050a-9ef9-45d4-ad05-061cbaa13206, session_timestamp=2019-03-12T16:03:40.933Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@7dc16d30 rejected from java.util.concurrent.ThreadPoolExecutor@20ef89e4[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:03:41,001Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7595237450303323218). {invocation_id=b332f9ed-1372-456e-a07a-d18498276d91, invocation_timestamp=2019-03-12T16:03:41Z, session_id=b332f9ed-1372-456e-a07a-d18498276d91, session_timestamp=2019-03-12T16:03:41Z}
[WARN ] 2019-03-12T16:03:41,004Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-7595237450303323218), initiationEntropy=-1217918261843755531, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=b332f9ed-1372-456e-a07a-d18498276d91, invocation_timestamp=2019-03-12T16:03:41Z, session_id=b332f9ed-1372-456e-a07a-d18498276d91, session_timestamp=2019-03-12T16:03:41Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@35df2c2b rejected from java.util.concurrent.ThreadPoolExecutor@20ef89e4[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:05:44,220Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a1d9b9c5-0d5a-48ed-ad29-470ba92063e1.jar {}
[INFO ] 2019-03-12T16:05:44,251Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-b333ebba-204b-4129-900e-eb8389c8166a.jar {}
[INFO ] 2019-03-12T16:05:44,294Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a1d9b9c5-0d5a-48ed-ad29-470ba92063e1.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b333ebba-204b-4129-900e-eb8389c8166a.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:05:44,325Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:05:44,330Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:05:44,345Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a1d9b9c5-0d5a-48ed-ad29-470ba92063e1.jar {}
[INFO ] 2019-03-12T16:05:44,374Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-b333ebba-204b-4129-900e-eb8389c8166a.jar {}
[INFO ] 2019-03-12T16:05:44,498Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T16:05:45,139Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:05:45,187Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:05:45,190Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:05:47,163Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:05:47,673Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:05:47,675Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:47,687Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:47,777Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:47,779Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:47,936Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:05:47,942Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:05:48,029Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:05:48,148Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:05:48,157Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:05:48,204Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 35FE3C17E39E25EAA5C450540F2FAEB684A8EAC008BCF4A96A56FAC5619EFE53, not inserting the second time {}
[INFO ] 2019-03-12T16:05:48,268Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,288Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,289Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,290Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,293Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,295Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,301Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:05:48,303Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:05:48,321Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:05:48,330Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T16:05:48,342Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:05:48,344Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,346Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,468Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,476Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:05:48,478Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,482Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,487Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,489Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,546Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:05:48,548Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:05:48,557Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:05:48,559Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:05:48,571Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 18FADFD8233393E93946BA3756C3BCCA892BFC471235530D466DF7CBFA6A3C25, not inserting the second time {}
[INFO ] 2019-03-12T16:05:48,581Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,584Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,597Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,599Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,602Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,615Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,616Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,622Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,624Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,626Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,627Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,629Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,633Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:05:48,635Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:05:48,653Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:05:48,663Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T16:05:48,673Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:05:48,675Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,677Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,771Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:05:48,780Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:05:48,781Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,786Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,791Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,792Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,853Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:05:48,855Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:05:48,866Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:05:48,867Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:05:48,876Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2076FC1891A76AB8F3364364F20943CBCCD81F6333261E4B06A6FB4E26129A48, not inserting the second time {}
[INFO ] 2019-03-12T16:05:48,884Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,887Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,897Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406747675) {}
[INFO ] 2019-03-12T16:05:48,899Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,901Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,912Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,914Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,916Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,924Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406748478) {}
[INFO ] 2019-03-12T16:05:48,926Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,929Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:05:48,938Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,939Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,944Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,945Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,946Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:48,947Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:05:48,947Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406748781) {}
[INFO ] 2019-03-12T16:05:49,376Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].call - Started sending message hey {}
[INFO ] 2019-03-12T16:05:49,558Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:05:49,626Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3386321295268459272). {}
[INFO ] 2019-03-12T16:05:49,697Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T16:05:49,730Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T16:05:49,743Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7960925760411313380). {}
[INFO ] 2019-03-12T16:05:49,721Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3386321295268459272). {invocation_id=e4809406-239d-40d5-8668-f697c77adce9, invocation_timestamp=2019-03-12T16:05:49.713Z, session_id=e4809406-239d-40d5-8668-f697c77adce9, session_timestamp=2019-03-12T16:05:49.713Z}
[INFO ] 2019-03-12T16:05:49,750Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].call - Started sending message hey {}
[INFO ] 2019-03-12T16:05:49,773Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7960925760411313380). {invocation_id=252fe81c-e27a-4d0b-a1e9-44a30f4af95a, invocation_timestamp=2019-03-12T16:05:49.773Z, session_id=252fe81c-e27a-4d0b-a1e9-44a30f4af95a, session_timestamp=2019-03-12T16:05:49.773Z}
[INFO ] 2019-03-12T16:05:49,776Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:05:49,780Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=335246554867657363). {}
[INFO ] 2019-03-12T16:05:49,788Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T16:05:49,816Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T16:05:49,823Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8367190111032002331). {}
[INFO ] 2019-03-12T16:05:49,840Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=335246554867657363). {invocation_id=002b2b38-cf60-4468-9449-8fbffa4fee73, invocation_timestamp=2019-03-12T16:05:49.839Z, session_id=002b2b38-cf60-4468-9449-8fbffa4fee73, session_timestamp=2019-03-12T16:05:49.839Z}
[INFO ] 2019-03-12T16:05:49,861Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8367190111032002331). {invocation_id=67080042-bd42-47d8-99ce-38b634121c66, invocation_timestamp=2019-03-12T16:05:49.859Z, session_id=67080042-bd42-47d8-99ce-38b634121c66, session_timestamp=2019-03-12T16:05:49.859Z}
[INFO ] 2019-03-12T16:05:49,951Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:05:49,999Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8077865069315185352). {}
[INFO ] 2019-03-12T16:05:50,019Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8077865069315185352). {invocation_id=99e3dbda-bd4b-4591-a4d4-cc0a7dc88df1, invocation_timestamp=2019-03-12T16:05:50.019Z, session_id=99e3dbda-bd4b-4591-a4d4-cc0a7dc88df1, session_timestamp=2019-03-12T16:05:50.019Z}
[INFO ] 2019-03-12T16:05:50,035Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T16:05:50,044Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5673527540081326408). {}
[INFO ] 2019-03-12T16:05:50,054Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5673527540081326408). {invocation_id=c11bf2a3-a660-4958-ade3-96ef4a88a0cc, invocation_timestamp=2019-03-12T16:05:50.053Z, session_id=c11bf2a3-a660-4958-ade3-96ef4a88a0cc, session_timestamp=2019-03-12T16:05:50.053Z}
[INFO ] 2019-03-12T16:05:50,073Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:05:50,084Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1130578986579054527). {}
[INFO ] 2019-03-12T16:05:50,094Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1130578986579054527). {invocation_id=ad53b9e5-8617-41a6-9c87-9b22c6a65d95, invocation_timestamp=2019-03-12T16:05:50.092Z, session_id=ad53b9e5-8617-41a6-9c87-9b22c6a65d95, session_timestamp=2019-03-12T16:05:50.092Z}
[INFO ] 2019-03-12T16:05:50,095Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T16:05:50,103Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1099647697613556962). {}
[INFO ] 2019-03-12T16:05:50,118Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1099647697613556962). {invocation_id=734e729e-916f-4b27-903a-ab4a41822e07, invocation_timestamp=2019-03-12T16:05:50.117Z, session_id=734e729e-916f-4b27-903a-ab4a41822e07, session_timestamp=2019-03-12T16:05:50.117Z}
[INFO ] 2019-03-12T16:05:50,117Z [Mock node 1 thread] flow.[e84624cc-111c-4e4b-baf9-2467d4099ab0].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:05:50,140Z [Mock node 1 thread] flow.[de063e90-779f-4b0b-bb47-da569996a108].call - Finished sending message Please reply ASAP {}
[INFO ] 2019-03-12T16:05:50,143Z [Mock node 1 thread] flow.[a6fa332b-ae7d-469a-b6ff-a435106213dd].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:05:50,148Z [Mock node 1 thread] flow.[68e3ce55-2074-4623-a902-1612acaef353].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T16:05:50,158Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:05:50,154Z [Mock node 2 thread] flow.[754f66ee-721b-4425-81f4-c5e58d4f1121].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:05:50,178Z [Mock node 2 thread] flow.[754f66ee-721b-4425-81f4-c5e58d4f1121].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:05:50,183Z [Mock node 2 thread] flow.[754f66ee-721b-4425-81f4-c5e58d4f1121].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8091753875457104947). {}
[INFO ] 2019-03-12T16:05:50,191Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8091753875457104947). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=fe046459-cc98-447e-89a7-79949824bd4b, invocation_timestamp=2019-03-12T16:05:50.190Z, session_id=fe046459-cc98-447e-89a7-79949824bd4b, session_timestamp=2019-03-12T16:05:50.190Z}
[INFO ] 2019-03-12T16:05:50,238Z [Mock node 2 thread] flow.[754f66ee-721b-4425-81f4-c5e58d4f1121].call - Suspending to finalise I got your message Thanks {}
[INFO ] 2019-03-12T16:05:50,245Z [Mock node 2 thread] flow.[754f66ee-721b-4425-81f4-c5e58d4f1121].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5393724065121509446). {}
[INFO ] 2019-03-12T16:06:23,345Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-14367bf3-0326-4173-bc99-7149bd4b170e.jar {}
[INFO ] 2019-03-12T16:06:23,370Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-28357c1c-1fa7-4e74-84ac-9cc12f9e350e.jar {}
[INFO ] 2019-03-12T16:06:23,418Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-14367bf3-0326-4173-bc99-7149bd4b170e.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-28357c1c-1fa7-4e74-84ac-9cc12f9e350e.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:06:23,449Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:06:23,452Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:06:23,465Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-14367bf3-0326-4173-bc99-7149bd4b170e.jar {}
[INFO ] 2019-03-12T16:06:23,498Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-28357c1c-1fa7-4e74-84ac-9cc12f9e350e.jar {}
[INFO ] 2019-03-12T16:06:23,613Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:06:24,239Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:06:24,280Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:06:24,284Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:06:26,228Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:06:26,742Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:06:26,744Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:26,754Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:26,840Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:26,842Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:26,993Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:06:27,000Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:06:27,091Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:06:27,205Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:06:27,215Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:06:27,261Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AB2EB865D12117E2DE2DC56C57D9EA82B96536979B79E426969172DC7182859E, not inserting the second time {}
[INFO ] 2019-03-12T16:06:27,344Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,366Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:27,368Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,369Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,371Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:27,372Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,378Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:06:27,379Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:06:27,401Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:06:27,412Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T16:06:27,425Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:06:27,428Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,430Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,583Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,593Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:06:27,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,599Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:27,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,607Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,669Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:06:27,673Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:06:27,685Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:06:27,687Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:06:27,702Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A2F9BF415D74530F11B902B5549DBA4448ACAA0CA5EDF40E8D1D7F69564D1A82, not inserting the second time {}
[INFO ] 2019-03-12T16:06:27,714Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,719Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:27,733Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:27,734Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,737Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:27,746Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,748Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,754Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:27,757Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,758Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,759Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:27,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:27,763Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:06:27,764Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:06:27,781Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:06:27,790Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T16:06:27,800Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:06:27,802Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,803Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,906Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:06:27,916Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:06:27,918Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:27,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:27,929Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:27,931Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:27,991Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:06:27,993Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:06:28,001Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:06:28,003Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:06:28,012Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CAF53838DEA38384606AFC98A70C82B2E4383C717C2BA645240649639DA330AE, not inserting the second time {}
[INFO ] 2019-03-12T16:06:28,019Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:28,022Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:28,031Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406786744) {}
[INFO ] 2019-03-12T16:06:28,032Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,035Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:28,043Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:28,047Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:28,057Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406787594) {}
[INFO ] 2019-03-12T16:06:28,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,062Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:06:28,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,075Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:28,077Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,078Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,079Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:06:28,080Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406787918) {}
[INFO ] 2019-03-12T16:06:28,511Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].call - Started sending message hey {}
[INFO ] 2019-03-12T16:06:28,730Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:06:28,804Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6249106894434128924). {}
[INFO ] 2019-03-12T16:06:28,884Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].call - Started sending message hey {}
[INFO ] 2019-03-12T16:06:28,922Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:06:28,934Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8307934761029868446). {}
[INFO ] 2019-03-12T16:06:28,911Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6249106894434128924). {invocation_id=1177af0f-efd1-43ae-8506-8673e3377d1a, invocation_timestamp=2019-03-12T16:06:28.899Z, session_id=1177af0f-efd1-43ae-8506-8673e3377d1a, session_timestamp=2019-03-12T16:06:28.899Z}
[INFO ] 2019-03-12T16:06:28,972Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8307934761029868446). {invocation_id=0450278a-e5c7-497f-a3e1-cd83e828c90b, invocation_timestamp=2019-03-12T16:06:28.971Z, session_id=0450278a-e5c7-497f-a3e1-cd83e828c90b, session_timestamp=2019-03-12T16:06:28.971Z}
[INFO ] 2019-03-12T16:06:29,079Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:06:29,119Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-736304734799997726). {}
[INFO ] 2019-03-12T16:06:29,135Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-736304734799997726). {invocation_id=4fe5f8f8-b036-4c4a-93fa-3d89c1be171d, invocation_timestamp=2019-03-12T16:06:29.134Z, session_id=4fe5f8f8-b036-4c4a-93fa-3d89c1be171d, session_timestamp=2019-03-12T16:06:29.134Z}
[INFO ] 2019-03-12T16:06:29,143Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:06:29,156Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7132341488891021424). {}
[INFO ] 2019-03-12T16:06:29,168Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7132341488891021424). {invocation_id=b4e6abba-fc5e-49bc-93f6-82373840417b, invocation_timestamp=2019-03-12T16:06:29.168Z, session_id=b4e6abba-fc5e-49bc-93f6-82373840417b, session_timestamp=2019-03-12T16:06:29.168Z}
[INFO ] 2019-03-12T16:06:29,179Z [Mock node 1 thread] flow.[b6d128bb-2e65-4f88-ac0e-7692979e276b].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:06:29,186Z [Mock node 1 thread] flow.[fe07aade-085e-48ec-bf3d-fa187fcbca3e].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:06:29,200Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:06:29,213Z [Mock node 2 thread] flow.[9edae5e9-070d-4cf5-9398-431230345f6c].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:06:29,238Z [Mock node 2 thread] flow.[9edae5e9-070d-4cf5-9398-431230345f6c].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:06:29,245Z [Mock node 2 thread] flow.[9edae5e9-070d-4cf5-9398-431230345f6c].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1902762391599210978). {}
[INFO ] 2019-03-12T16:06:29,251Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1902762391599210978). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=f4cd8078-5cf2-43ad-a7bd-19afb94996ef, invocation_timestamp=2019-03-12T16:06:29.250Z, session_id=f4cd8078-5cf2-43ad-a7bd-19afb94996ef, session_timestamp=2019-03-12T16:06:29.250Z}
[INFO ] 2019-03-12T16:07:45,111Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-0ce0275b-2cbc-49c8-89bf-21d849989d9b.jar {}
[INFO ] 2019-03-12T16:07:45,141Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-cb79bccb-822c-43cc-868a-68ec4d984c17.jar {}
[INFO ] 2019-03-12T16:07:45,188Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-0ce0275b-2cbc-49c8-89bf-21d849989d9b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-cb79bccb-822c-43cc-868a-68ec4d984c17.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:07:45,218Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:07:45,222Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:07:45,236Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-0ce0275b-2cbc-49c8-89bf-21d849989d9b.jar {}
[INFO ] 2019-03-12T16:07:45,268Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-cb79bccb-822c-43cc-868a-68ec4d984c17.jar {}
[INFO ] 2019-03-12T16:07:45,380Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T16:07:46,016Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:07:46,057Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:07:46,060Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:07:48,004Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:07:48,517Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:07:48,519Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:48,529Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:48,620Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:48,623Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:48,775Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:07:48,782Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:07:48,867Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:07:48,980Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:07:48,990Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:07:49,037Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 29B55E5B3B16B3F3C370F0D5F834B48A230D67300F1DB3CBBD2D2FDA62378F18, not inserting the second time {}
[INFO ] 2019-03-12T16:07:49,100Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,120Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,123Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,126Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,128Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,134Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:07:49,135Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:07:49,151Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:07:49,159Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T16:07:49,170Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:07:49,172Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,174Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,317Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,326Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:07:49,328Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,337Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,339Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,394Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:07:49,397Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:07:49,407Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:07:49,410Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:07:49,421Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7ADA65A1315C4CEA29200E7732E6891FA622B139C24707DA3C525E683E76FDD1, not inserting the second time {}
[INFO ] 2019-03-12T16:07:49,433Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,436Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,450Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,451Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,454Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,466Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,468Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,475Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,478Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,479Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,481Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,482Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,486Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:07:49,487Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:07:49,509Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:07:49,516Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T16:07:49,526Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:07:49,527Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,529Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,620Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:07:49,633Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:07:49,635Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,640Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,650Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,712Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:07:49,714Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:07:49,722Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:07:49,724Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:07:49,732Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 29099DC5AD30A2C58D5498E3527EE921F7DD0040FECFA179A710934C3B4E993B, not inserting the second time {}
[INFO ] 2019-03-12T16:07:49,739Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,742Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,750Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552406868519) {}
[INFO ] 2019-03-12T16:07:49,751Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,754Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,764Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,768Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,776Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552406869328) {}
[INFO ] 2019-03-12T16:07:49,777Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,780Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:07:49,789Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,790Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,793Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,794Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,795Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:49,796Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:07:49,798Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552406869635) {}
[INFO ] 2019-03-12T16:07:50,211Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].call - Started sending message hey {}
[INFO ] 2019-03-12T16:07:50,386Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:07:50,450Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2614880788233283508). {}
[INFO ] 2019-03-12T16:07:50,516Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].call - Started sending message hey {}
[INFO ] 2019-03-12T16:07:50,544Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:07:50,550Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7850984697491752275). {}
[INFO ] 2019-03-12T16:07:50,540Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2614880788233283508). {invocation_id=b58389e8-efa3-4675-ba9f-1741daee7c28, invocation_timestamp=2019-03-12T16:07:50.532Z, session_id=b58389e8-efa3-4675-ba9f-1741daee7c28, session_timestamp=2019-03-12T16:07:50.532Z}
[INFO ] 2019-03-12T16:07:50,597Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7850984697491752275). {invocation_id=a4932ce4-5cad-4244-acd9-2792f749383b, invocation_timestamp=2019-03-12T16:07:50.597Z, session_id=a4932ce4-5cad-4244-acd9-2792f749383b, session_timestamp=2019-03-12T16:07:50.597Z}
[INFO ] 2019-03-12T16:07:50,706Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:07:50,758Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5787064750590486117). {}
[INFO ] 2019-03-12T16:07:50,775Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5787064750590486117). {invocation_id=237d8d59-74f4-42c0-96f9-ca6bf4b454d6, invocation_timestamp=2019-03-12T16:07:50.774Z, session_id=237d8d59-74f4-42c0-96f9-ca6bf4b454d6, session_timestamp=2019-03-12T16:07:50.774Z}
[INFO ] 2019-03-12T16:07:50,783Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:07:50,792Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7012067717299110187). {}
[INFO ] 2019-03-12T16:07:50,802Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7012067717299110187). {invocation_id=15863e8c-2a63-470e-8f33-04fb2b308cc1, invocation_timestamp=2019-03-12T16:07:50.801Z, session_id=15863e8c-2a63-470e-8f33-04fb2b308cc1, session_timestamp=2019-03-12T16:07:50.801Z}
[INFO ] 2019-03-12T16:07:50,810Z [Mock node 1 thread] flow.[953a1ad3-1192-40c5-98ac-58e2849a9bb0].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:07:50,824Z [Mock node 1 thread] flow.[e938306c-3a31-46b1-811d-bac81bf8663f].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:07:50,840Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:07:50,836Z [Mock node 1 thread] flow.[cee01104-4592-4664-82b3-3207b844d81f].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:07:50,860Z [Mock node 1 thread] flow.[cee01104-4592-4664-82b3-3207b844d81f].collectSignature - Suspending to collect signatures I got your message Thanks {}
[WARN ] 2019-03-12T16:07:50,864Z [Mock node 1 thread] flow.[cee01104-4592-4664-82b3-3207b844d81f].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: The Initiator of CollectSignaturesFlow must pass in exactly the sessions required to sign the transaction.
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:109) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.CollectSignaturesFlow.call(CollectSignaturesFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at asyncFlowInvocation.flow.SendMessageFlow.collectSignature(SendMessageFlow.kt:45) ~[classes/:?]
	at asyncFlowInvocation.flow.SendMessageFlow.call(SendMessageFlow.kt:33) ~[classes/:?]
	at asyncFlowInvocation.flow.SendMessageFlow.call(SendMessageFlow.kt:16) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:12:18,266Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-18600b93-ba1e-4111-9019-285ef94a16f6.jar {}
[INFO ] 2019-03-12T16:12:18,296Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a9e47298-fac2-4c29-90d6-f6ac6a3a70af.jar {}
[INFO ] 2019-03-12T16:12:18,343Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-18600b93-ba1e-4111-9019-285ef94a16f6.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a9e47298-fac2-4c29-90d6-f6ac6a3a70af.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:12:18,379Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:12:18,383Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:12:18,396Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-18600b93-ba1e-4111-9019-285ef94a16f6.jar {}
[INFO ] 2019-03-12T16:12:18,428Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a9e47298-fac2-4c29-90d6-f6ac6a3a70af.jar {}
[INFO ] 2019-03-12T16:12:18,540Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ef3efcc {}
[INFO ] 2019-03-12T16:12:19,133Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:12:19,173Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:12:19,177Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:12:21,022Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:12:21,541Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:12:21,543Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:21,554Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:21,653Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:21,655Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:21,817Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:12:21,824Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:12:21,912Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:12:22,028Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:12:22,038Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:12:22,081Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9D7011ED6612F0999D519A9B8342658AECBE0DEEBC3F9868E938B2D9E0939F3D, not inserting the second time {}
[INFO ] 2019-03-12T16:12:22,155Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,176Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,178Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,179Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,180Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,182Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,186Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:12:22,188Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:12:22,205Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:12:22,214Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T16:12:22,223Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:12:22,225Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,228Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,352Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,360Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:12:22,362Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,367Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,372Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,374Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,437Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:12:22,438Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:12:22,451Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:12:22,453Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:12:22,463Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FE6B1C7A33AB427A4C033AE4FA1A6D937580F3E1A17517B9363DF393F6F01D70, not inserting the second time {}
[INFO ] 2019-03-12T16:12:22,471Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,474Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,486Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,488Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,490Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,504Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,505Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,512Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,515Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,516Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,518Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,520Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,522Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:12:22,524Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:12:22,544Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:12:22,554Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T16:12:22,563Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:12:22,565Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,566Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,667Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:12:22,679Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:12:22,681Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,687Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,692Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,693Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,750Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:12:22,751Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:12:22,760Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:12:22,761Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:12:22,769Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 797B69B994BE4B230A88C55C970F4B49692A04C5A2A7075F06A570F1484BC727, not inserting the second time {}
[INFO ] 2019-03-12T16:12:22,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,779Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,787Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407141543) {}
[INFO ] 2019-03-12T16:12:22,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,791Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,799Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,801Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,803Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,814Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407142362) {}
[INFO ] 2019-03-12T16:12:22,815Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,817Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:12:22,827Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,828Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,833Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,835Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,836Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:22,837Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:12:22,839Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407142681) {}
[INFO ] 2019-03-12T16:12:23,336Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].call - Started sending message hey {}
[INFO ] 2019-03-12T16:12:23,529Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:12:23,593Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2222027647641283596). {}
[INFO ] 2019-03-12T16:12:23,660Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].call - Started sending message hey {}
[INFO ] 2019-03-12T16:12:23,689Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:12:23,694Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8847743188028154456). {}
[INFO ] 2019-03-12T16:12:23,682Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2222027647641283596). {invocation_id=a9c49eac-0629-4342-ac14-78649d1dc941, invocation_timestamp=2019-03-12T16:12:23.674Z, session_id=a9c49eac-0629-4342-ac14-78649d1dc941, session_timestamp=2019-03-12T16:12:23.674Z}
[INFO ] 2019-03-12T16:12:23,737Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8847743188028154456). {invocation_id=6364fe4b-a128-4c3a-b60a-4d30a23e484a, invocation_timestamp=2019-03-12T16:12:23.737Z, session_id=6364fe4b-a128-4c3a-b60a-4d30a23e484a, session_timestamp=2019-03-12T16:12:23.737Z}
[INFO ] 2019-03-12T16:12:23,854Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:12:23,903Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=742976163450846281). {}
[INFO ] 2019-03-12T16:12:23,920Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=742976163450846281). {invocation_id=f60938f1-92df-4126-95e8-e0b136786729, invocation_timestamp=2019-03-12T16:12:23.919Z, session_id=f60938f1-92df-4126-95e8-e0b136786729, session_timestamp=2019-03-12T16:12:23.919Z}
[INFO ] 2019-03-12T16:12:23,930Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:12:23,940Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4671126470704076219). {}
[INFO ] 2019-03-12T16:12:23,956Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4671126470704076219). {invocation_id=79ddf547-7e2c-44ca-bb8c-e216c7f984f3, invocation_timestamp=2019-03-12T16:12:23.955Z, session_id=79ddf547-7e2c-44ca-bb8c-e216c7f984f3, session_timestamp=2019-03-12T16:12:23.955Z}
[INFO ] 2019-03-12T16:12:23,963Z [Mock node 1 thread] flow.[a4bb952e-dfd0-42af-9f40-beeee5906d3b].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:12:23,983Z [Mock node 1 thread] flow.[b1ec7925-2199-4df8-b5b9-b5ce2c472ce5].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:12:24,008Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:12:23,996Z [Mock node 1 thread] flow.[421bb86c-be08-4a33-a5cc-cd389590d124].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:12:24,030Z [Mock node 1 thread] flow.[421bb86c-be08-4a33-a5cc-cd389590d124].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:12:24,035Z [Mock node 1 thread] flow.[421bb86c-be08-4a33-a5cc-cd389590d124].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6445578587093664712). {}
[INFO ] 2019-03-12T16:12:24,042Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6445578587093664712). {invocation_id=0fd34805-612c-4ffa-a3fb-fe708ebfc594, invocation_timestamp=2019-03-12T16:12:24.041Z, session_id=0fd34805-612c-4ffa-a3fb-fe708ebfc594, session_timestamp=2019-03-12T16:12:24.041Z}
[INFO ] 2019-03-12T16:13:07,422Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-9061c294-5da1-43bb-a9ee-7059e0911409.jar {}
[INFO ] 2019-03-12T16:13:07,451Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-73d09d69-b147-43c7-8e44-fa1648c5b4f5.jar {}
[INFO ] 2019-03-12T16:13:07,498Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-9061c294-5da1-43bb-a9ee-7059e0911409.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-73d09d69-b147-43c7-8e44-fa1648c5b4f5.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:13:07,529Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:13:07,533Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:13:07,546Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-9061c294-5da1-43bb-a9ee-7059e0911409.jar {}
[INFO ] 2019-03-12T16:13:07,575Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-73d09d69-b147-43c7-8e44-fa1648c5b4f5.jar {}
[INFO ] 2019-03-12T16:13:07,707Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:13:08,334Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:13:08,375Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:13:08,379Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:13:10,343Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:13:10,850Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:13:10,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:10,862Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:10,953Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:10,955Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,105Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:13:11,111Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:13:11,202Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:13:11,322Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:13:11,331Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:13:11,376Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8C3950090E5FEEBF13C3C95CA2E7032AA27397196691F1D1C838BF824CBF2274, not inserting the second time {}
[INFO ] 2019-03-12T16:13:11,442Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,463Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:11,465Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,467Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,469Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:11,470Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,476Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:13:11,477Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:13:11,495Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:13:11,504Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T16:13:11,515Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:13:11,517Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,519Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,641Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,650Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:13:11,651Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,655Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:11,660Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,661Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,715Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:13:11,717Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:13:11,726Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:13:11,727Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:13:11,740Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B0AE0FA7E708890A286E520AD6E26CE50D7D997866D8D5374418F6F6A7B76387, not inserting the second time {}
[INFO ] 2019-03-12T16:13:11,749Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,753Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:11,763Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:11,765Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,767Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:11,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,780Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,788Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:11,790Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,791Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,792Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:11,793Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:11,797Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:13:11,798Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:13:11,821Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:13:11,830Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T16:13:11,844Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:13:11,846Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,847Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,933Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:13:11,943Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:13:11,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:11,949Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:11,955Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:11,957Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,015Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:13:12,017Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:13:12,027Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:13:12,029Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:13:12,038Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C5FDB276376EB31FB0ECA4A6D6B17A889DC6CBB020FDB525D04454221A928887, not inserting the second time {}
[INFO ] 2019-03-12T16:13:12,046Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:12,049Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:12,059Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407190852) {}
[INFO ] 2019-03-12T16:13:12,060Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,062Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:12,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,071Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:12,074Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:12,083Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407191651) {}
[INFO ] 2019-03-12T16:13:12,085Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,087Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:13:12,096Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,098Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,103Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:12,104Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,105Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,106Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:13:12,107Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407191944) {}
[INFO ] 2019-03-12T16:13:12,510Z [Mock node 1 thread] flow.[de31fae0-8527-4ace-a9ae-96ba5c4b2fb5].call - Started sending message hey {}
[INFO ] 2019-03-12T16:13:12,687Z [Mock node 1 thread] flow.[de31fae0-8527-4ace-a9ae-96ba5c4b2fb5].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:13:12,751Z [Mock node 1 thread] flow.[de31fae0-8527-4ace-a9ae-96ba5c4b2fb5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8729010793591483260). {}
[INFO ] 2019-03-12T16:13:12,832Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:13:12,823Z [Mock node 1 thread] flow.[be05a104-2185-454d-80b2-6d53e7caffc4].call - Started sending message hey {}
[INFO ] 2019-03-12T16:13:12,858Z [Mock node 1 thread] flow.[be05a104-2185-454d-80b2-6d53e7caffc4].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:13:12,865Z [Mock node 1 thread] flow.[be05a104-2185-454d-80b2-6d53e7caffc4].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6275743676455431099). {}
[INFO ] 2019-03-12T16:13:12,841Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8729010793591483260). {invocation_id=60d8ca28-fee4-4802-85fc-7af499a0658d, invocation_timestamp=2019-03-12T16:13:12.833Z, session_id=60d8ca28-fee4-4802-85fc-7af499a0658d, session_timestamp=2019-03-12T16:13:12.833Z}
[INFO ] 2019-03-12T16:13:12,916Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6275743676455431099). {invocation_id=f9409f2b-8da7-4160-bb9c-712a728d9b26, invocation_timestamp=2019-03-12T16:13:12.915Z, session_id=f9409f2b-8da7-4160-bb9c-712a728d9b26, session_timestamp=2019-03-12T16:13:12.915Z}
[INFO ] 2019-03-12T16:13:59,297Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ebd28086-b6ea-4b86-ae1d-d7122e686e48.jar {}
[INFO ] 2019-03-12T16:13:59,325Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-113e15fe-0c17-4d52-a85a-aded8a4b3d74.jar {}
[INFO ] 2019-03-12T16:13:59,370Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ebd28086-b6ea-4b86-ae1d-d7122e686e48.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-113e15fe-0c17-4d52-a85a-aded8a4b3d74.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:13:59,403Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:13:59,407Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:13:59,420Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ebd28086-b6ea-4b86-ae1d-d7122e686e48.jar {}
[INFO ] 2019-03-12T16:13:59,447Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-113e15fe-0c17-4d52-a85a-aded8a4b3d74.jar {}
[INFO ] 2019-03-12T16:13:59,571Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4619854a {}
[INFO ] 2019-03-12T16:14:00,189Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:14:00,229Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:14:00,304Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:14:02,147Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:14:02,662Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:14:02,665Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:02,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:02,764Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:02,767Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:02,915Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:14:02,924Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:14:03,010Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:14:03,132Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:14:03,143Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:14:03,186Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E4295A96A088BF16FCB427E85F6C21DC4698DFA6844311CDAE31DFDB603D3192, not inserting the second time {}
[INFO ] 2019-03-12T16:14:03,249Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,268Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,270Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,271Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,273Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,275Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,280Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:14:03,282Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:14:03,299Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:14:03,309Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@13d8d105 {}
[INFO ] 2019-03-12T16:14:03,320Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:14:03,323Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,324Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,447Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,458Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:14:03,459Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,463Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,468Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,470Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,529Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:14:03,531Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:14:03,540Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:14:03,542Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:14:03,555Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 43DD5CF980339E4DCAB922C0ED3F56598B5842EA4560880AAEFA3BB79391323A, not inserting the second time {}
[INFO ] 2019-03-12T16:14:03,563Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,566Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,579Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,580Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,584Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,596Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,599Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,606Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,608Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,610Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,612Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,613Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,616Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:14:03,618Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:14:03,640Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:14:03,649Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@579347a7 {}
[INFO ] 2019-03-12T16:14:03,660Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:14:03,661Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,663Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,759Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:14:03,767Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:14:03,768Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,773Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,779Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,780Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,839Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 7356631F1CAE9ABFB8B5E6548397A7E04ED8A8D45A5A98B4CCC7BFA83ADE3403 {}
[WARN ] 2019-03-12T16:14:03,841Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:14:03,850Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:14:03,853Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:14:03,862Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 748B786A89EE17EC46F4C3325D406FC585E36B076CB999705B06CF63F04F48D7, not inserting the second time {}
[INFO ] 2019-03-12T16:14:03,870Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,873Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,881Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407242665) {}
[INFO ] 2019-03-12T16:14:03,883Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,885Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,893Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,894Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,896Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,908Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407243459) {}
[INFO ] 2019-03-12T16:14:03,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,912Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:14:03,923Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,925Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,931Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,932Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:03,934Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:14:03,935Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407243768) {}
[INFO ] 2019-03-12T16:14:04,449Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].call - Started sending message hey {}
[INFO ] 2019-03-12T16:14:04,630Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:14:04,688Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3257316845762586464). {}
[INFO ] 2019-03-12T16:14:04,755Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].call - Started sending message hey {}
[INFO ] 2019-03-12T16:14:04,786Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:14:04,798Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=850030950656892004). {}
[INFO ] 2019-03-12T16:14:04,776Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3257316845762586464). {invocation_id=1c1561e2-7562-4b76-84ce-8664bf850d1c, invocation_timestamp=2019-03-12T16:14:04.768Z, session_id=1c1561e2-7562-4b76-84ce-8664bf850d1c, session_timestamp=2019-03-12T16:14:04.768Z}
[INFO ] 2019-03-12T16:14:04,830Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=850030950656892004). {invocation_id=cd171a53-dbcf-4be4-84ea-cf6e0c83ef59, invocation_timestamp=2019-03-12T16:14:04.829Z, session_id=cd171a53-dbcf-4be4-84ea-cf6e0c83ef59, session_timestamp=2019-03-12T16:14:04.829Z}
[INFO ] 2019-03-12T16:14:04,937Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:14:04,984Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6151731684337396190). {}
[INFO ] 2019-03-12T16:14:05,005Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=6151731684337396190). {invocation_id=dcd1cbc3-e31d-407f-8677-fe883719fdba, invocation_timestamp=2019-03-12T16:14:05.004Z, session_id=dcd1cbc3-e31d-407f-8677-fe883719fdba, session_timestamp=2019-03-12T16:14:05.004Z}
[INFO ] 2019-03-12T16:14:05,014Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:14:05,026Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6681634962943055742). {}
[INFO ] 2019-03-12T16:14:05,036Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6681634962943055742). {invocation_id=0a015471-16ea-4b5e-8892-31b5d2bfe910, invocation_timestamp=2019-03-12T16:14:05.035Z, session_id=0a015471-16ea-4b5e-8892-31b5d2bfe910, session_timestamp=2019-03-12T16:14:05.035Z}
[INFO ] 2019-03-12T16:14:05,043Z [Mock node 1 thread] flow.[77e7a70c-757b-430e-85aa-8dcffc7d9f37].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:14:05,053Z [Mock node 1 thread] flow.[1f6b1346-f58d-4606-a6c8-fc72c521b77e].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:14:05,066Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:14:05,064Z [Mock node 1 thread] flow.[a17c550a-c08f-4182-b1d8-90b05e62830c].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:14:05,093Z [Mock node 1 thread] flow.[a17c550a-c08f-4182-b1d8-90b05e62830c].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:14:05,097Z [Mock node 1 thread] flow.[a17c550a-c08f-4182-b1d8-90b05e62830c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8089200951177748676). {}
[INFO ] 2019-03-12T16:14:05,104Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8089200951177748676). {invocation_id=6628165a-abba-4a8c-99c4-631a077997f1, invocation_timestamp=2019-03-12T16:14:05.104Z, session_id=6628165a-abba-4a8c-99c4-631a077997f1, session_timestamp=2019-03-12T16:14:05.104Z}
[INFO ] 2019-03-12T16:16:30,437Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-7234efa5-f8c3-4d11-894c-f17e5ad965ab.jar {}
[INFO ] 2019-03-12T16:16:30,465Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-e79380d6-0ce5-44fe-ba29-9244a683eeb0.jar {}
[INFO ] 2019-03-12T16:16:30,511Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7234efa5-f8c3-4d11-894c-f17e5ad965ab.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-e79380d6-0ce5-44fe-ba29-9244a683eeb0.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:16:30,542Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:16:30,546Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:16:30,559Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7234efa5-f8c3-4d11-894c-f17e5ad965ab.jar {}
[INFO ] 2019-03-12T16:16:30,587Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-e79380d6-0ce5-44fe-ba29-9244a683eeb0.jar {}
[INFO ] 2019-03-12T16:16:30,703Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:16:31,343Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:16:31,384Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:16:31,387Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:16:33,352Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:16:33,871Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:16:33,873Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:33,884Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:33,981Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:33,983Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,166Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:16:34,175Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:16:34,283Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:16:34,421Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:16:34,433Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:16:34,489Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E5DA0FA16E6384F92A53CC6F0A9B8F9EE9A46583DDD80E0BA5AB6B1BCCA15B36, not inserting the second time {}
[INFO ] 2019-03-12T16:16:34,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,589Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:34,591Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,594Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,596Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:34,597Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,604Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:16:34,606Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:16:34,627Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:16:34,640Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T16:16:34,653Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:16:34,656Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:34,658Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:34,778Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:34,787Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:16:34,788Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,792Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:34,797Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,799Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,860Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:16:34,864Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:16:34,874Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:16:34,876Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:16:34,889Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E0E63B3BFFA962E937E1DD565024FA624938D5F5A83B7DC6E7853F754C5A923E, not inserting the second time {}
[INFO ] 2019-03-12T16:16:34,898Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,902Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:34,915Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:34,917Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,920Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:34,932Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,934Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,940Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:34,942Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,944Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,945Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:34,947Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:34,950Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:16:34,951Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:16:34,968Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:16:34,975Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T16:16:34,985Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:16:34,987Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:34,988Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:35,085Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:16:35,094Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:16:35,097Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,102Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:35,107Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,109Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,168Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:16:35,170Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:16:35,181Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:16:35,182Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:16:35,192Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5BB587FBB8ACE846C30D042AB1CD286727D02A8192EC9C1D8D43DD918A025148, not inserting the second time {}
[INFO ] 2019-03-12T16:16:35,200Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:35,202Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:35,211Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407393873) {}
[INFO ] 2019-03-12T16:16:35,212Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,214Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:35,223Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:35,228Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:35,238Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407394788) {}
[INFO ] 2019-03-12T16:16:35,239Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,241Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:16:35,249Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,251Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,256Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:35,257Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,258Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,259Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:16:35,261Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407395096) {}
[INFO ] 2019-03-12T16:16:35,659Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].call - Started sending message hey {}
[INFO ] 2019-03-12T16:16:35,838Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:16:35,900Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7265572328527344004). {}
[INFO ] 2019-03-12T16:16:35,961Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].call - Started sending message hey {}
[INFO ] 2019-03-12T16:16:35,994Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:16:36,007Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1344576634879431555). {}
[INFO ] 2019-03-12T16:16:35,984Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7265572328527344004). {invocation_id=3896f322-2bd2-4a25-9c3d-f47017c6bd26, invocation_timestamp=2019-03-12T16:16:35.976Z, session_id=3896f322-2bd2-4a25-9c3d-f47017c6bd26, session_timestamp=2019-03-12T16:16:35.976Z}
[INFO ] 2019-03-12T16:16:36,039Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1344576634879431555). {invocation_id=633ba28b-8b2c-4660-b00b-809d0365e956, invocation_timestamp=2019-03-12T16:16:36.038Z, session_id=633ba28b-8b2c-4660-b00b-809d0365e956, session_timestamp=2019-03-12T16:16:36.038Z}
[INFO ] 2019-03-12T16:16:36,154Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:16:36,206Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7754364369294157528). {}
[INFO ] 2019-03-12T16:16:36,225Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7754364369294157528). {invocation_id=148e7d5b-da98-43b3-b62f-81a2561731a9, invocation_timestamp=2019-03-12T16:16:36.224Z, session_id=148e7d5b-da98-43b3-b62f-81a2561731a9, session_timestamp=2019-03-12T16:16:36.224Z}
[INFO ] 2019-03-12T16:16:36,235Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:16:36,247Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2232949949613710377). {}
[INFO ] 2019-03-12T16:16:36,258Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2232949949613710377). {invocation_id=c79034c2-ede0-469d-b760-bd124272140b, invocation_timestamp=2019-03-12T16:16:36.257Z, session_id=c79034c2-ede0-469d-b760-bd124272140b, session_timestamp=2019-03-12T16:16:36.257Z}
[INFO ] 2019-03-12T16:16:36,265Z [Mock node 1 thread] flow.[d9985715-8657-40ba-9ee7-7822fad2befb].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:16:36,283Z [Mock node 1 thread] flow.[eb2434ee-b539-4fba-a09c-19cd9f5b1568].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:16:36,291Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:16:36,289Z [Mock node 1 thread] flow.[b9b23c99-3295-44f2-af94-256c03706ac7].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:16:36,310Z [Mock node 1 thread] flow.[b9b23c99-3295-44f2-af94-256c03706ac7].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:16:36,314Z [Mock node 1 thread] flow.[b9b23c99-3295-44f2-af94-256c03706ac7].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6579481145124762091). {}
[INFO ] 2019-03-12T16:16:36,321Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6579481145124762091). {invocation_id=558abc9c-8c8a-4121-9013-cfc3dab01be5, invocation_timestamp=2019-03-12T16:16:36.320Z, session_id=558abc9c-8c8a-4121-9013-cfc3dab01be5, session_timestamp=2019-03-12T16:16:36.320Z}
[INFO ] 2019-03-12T16:17:39,781Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-3be1b1b7-a924-4450-a14c-75ec5e180703.jar {}
[INFO ] 2019-03-12T16:17:39,809Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-3056beb8-4363-45ce-b6b4-9058d035609d.jar {}
[INFO ] 2019-03-12T16:17:39,854Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3be1b1b7-a924-4450-a14c-75ec5e180703.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3056beb8-4363-45ce-b6b4-9058d035609d.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:17:39,885Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:17:39,888Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:17:39,900Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3be1b1b7-a924-4450-a14c-75ec5e180703.jar {}
[INFO ] 2019-03-12T16:17:39,935Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-3056beb8-4363-45ce-b6b4-9058d035609d.jar {}
[INFO ] 2019-03-12T16:17:40,077Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T16:17:40,690Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:17:40,731Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:17:40,735Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:17:42,688Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:17:43,227Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:17:43,233Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,262Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:43,369Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,371Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,530Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:17:43,537Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:17:43,623Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:17:43,745Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:17:43,754Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:17:43,798Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 65A15A482F5EC3FCD0A5A775AF1920A7FBE4016C90A8C996C4A14D5921AA6485, not inserting the second time {}
[INFO ] 2019-03-12T16:17:43,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,910Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:43,912Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,913Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,915Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:43,917Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:43,923Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:17:43,925Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:17:43,950Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:17:43,967Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T16:17:43,984Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:17:43,986Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:43,989Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:44,157Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:44,168Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:17:44,170Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,178Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,184Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,185Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,249Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:17:44,251Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:17:44,264Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:17:44,265Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:17:44,277Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8327631572141D30DB723F50B8DD8FBEC2595122D135F4D492159D9DBCB556E9, not inserting the second time {}
[INFO ] 2019-03-12T16:17:44,284Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:44,288Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,299Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:44,300Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,303Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,312Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,313Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,318Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:44,319Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,322Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:44,323Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,325Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:17:44,327Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:17:44,344Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:17:44,352Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T16:17:44,360Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:17:44,361Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:44,363Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:44,480Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:17:44,487Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:17:44,489Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,494Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,498Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,499Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,554Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:17:44,556Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:17:44,564Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:17:44,565Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:17:44,577Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 90CE4C62BE515B1E062BE5B5BA347922206EC33E2DA8D6FED68964DC238D2740, not inserting the second time {}
[INFO ] 2019-03-12T16:17:44,586Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:44,589Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407463233) {}
[INFO ] 2019-03-12T16:17:44,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,605Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,616Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,618Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,620Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,632Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407464170) {}
[INFO ] 2019-03-12T16:17:44,633Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,635Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:17:44,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,647Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,651Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:44,653Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,654Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:44,656Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:17:44,658Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407464489) {}
[INFO ] 2019-03-12T16:17:45,129Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:17:45,122Z [Mock node 1 thread] flow.[697c7983-42db-4211-afab-6a1e86c94ba0].call - Started sending message hey {}
[INFO ] 2019-03-12T16:17:45,316Z [Mock node 1 thread] flow.[697c7983-42db-4211-afab-6a1e86c94ba0].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:17:45,376Z [Mock node 1 thread] flow.[697c7983-42db-4211-afab-6a1e86c94ba0].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8272266033981391780). {}
[INFO ] 2019-03-12T16:17:45,442Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8272266033981391780). {invocation_id=4b66db97-c610-4e6e-b35c-92324f2dec3c, invocation_timestamp=2019-03-12T16:17:45.435Z, session_id=4b66db97-c610-4e6e-b35c-92324f2dec3c, session_timestamp=2019-03-12T16:17:45.435Z}
[WARN ] 2019-03-12T16:17:45,481Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-8272266033981391780), initiationEntropy=-492603110789680225, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=4b66db97-c610-4e6e-b35c-92324f2dec3c, invocation_timestamp=2019-03-12T16:17:45.435Z, session_id=4b66db97-c610-4e6e-b35c-92324f2dec3c, session_timestamp=2019-03-12T16:17:45.435Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@75b7bf24 rejected from java.util.concurrent.ThreadPoolExecutor@32a122de[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:20:17,561Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-948e9a50-3bbe-4bed-8eef-b7119fc97b51.jar {}
[INFO ] 2019-03-12T16:20:17,598Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-757f8449-dcbb-4839-9c9e-29693b6df3ac.jar {}
[INFO ] 2019-03-12T16:20:17,657Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-948e9a50-3bbe-4bed-8eef-b7119fc97b51.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-757f8449-dcbb-4839-9c9e-29693b6df3ac.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:20:17,696Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:20:17,701Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:20:17,721Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-948e9a50-3bbe-4bed-8eef-b7119fc97b51.jar {}
[INFO ] 2019-03-12T16:20:17,753Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-757f8449-dcbb-4839-9c9e-29693b6df3ac.jar {}
[INFO ] 2019-03-12T16:20:17,903Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4193da4d {}
[INFO ] 2019-03-12T16:20:18,709Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:20:18,768Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:20:18,776Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:20:21,363Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:20:21,968Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:20:21,971Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:21,985Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:22,108Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,111Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,319Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:20:22,327Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:20:22,467Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:20:22,639Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:20:22,666Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:20:22,724Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C0425B141F819F8BE72B7CDBD5FA6A3A15E82D1CC65D35D4957BB5C41575FD86, not inserting the second time {}
[INFO ] 2019-03-12T16:20:22,812Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,838Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:22,840Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,844Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:22,847Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:22,858Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:20:22,861Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:20:22,891Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:20:22,906Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@379ddfda {}
[INFO ] 2019-03-12T16:20:22,922Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:20:22,925Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:22,928Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:23,070Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:23,085Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:20:23,088Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,096Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,104Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,106Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,178Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:20:23,180Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:20:23,191Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:20:23,194Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:20:23,206Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 65214232688EF0B61EDDC9FD05989078E3CAE7047F0D0F6CEC4BEFE4D8B97EA8, not inserting the second time {}
[INFO ] 2019-03-12T16:20:23,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:23,220Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,233Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:23,235Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,240Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,261Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,265Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,274Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:23,277Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,280Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,284Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:23,287Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,291Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:20:23,292Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:20:23,319Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:20:23,333Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7edad7d2 {}
[INFO ] 2019-03-12T16:20:23,350Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:20:23,354Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:23,356Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:23,504Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:20:23,518Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:20:23,520Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,529Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,537Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,539Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,612Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:20:23,615Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:20:23,626Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:20:23,628Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:20:23,640Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 65FAF9ED701D0B1627EC36E82741D60068299B2D6AB8E3EB36AE986C8919F281, not inserting the second time {}
[INFO ] 2019-03-12T16:20:23,652Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:23,657Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,671Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407621970) {}
[INFO ] 2019-03-12T16:20:23,672Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,676Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,688Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,689Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,692Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,706Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407623088) {}
[INFO ] 2019-03-12T16:20:23,708Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,711Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:20:23,726Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,729Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,736Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:23,739Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:23,742Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:20:23,745Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407623520) {}
[INFO ] 2019-03-12T16:20:24,294Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].call - Started sending message hey {}
[INFO ] 2019-03-12T16:20:24,545Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:20:24,634Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4675171558526233641). {}
[INFO ] 2019-03-12T16:20:24,727Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].call - Started sending message hey {}
[INFO ] 2019-03-12T16:20:24,768Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:20:24,783Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=541016716192888612). {}
[INFO ] 2019-03-12T16:20:24,752Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4675171558526233641). {invocation_id=cb72a704-7abc-493f-b7d0-ac05d1eecd6f, invocation_timestamp=2019-03-12T16:20:24.743Z, session_id=cb72a704-7abc-493f-b7d0-ac05d1eecd6f, session_timestamp=2019-03-12T16:20:24.743Z}
[INFO ] 2019-03-12T16:20:24,821Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=541016716192888612). {invocation_id=5f034c6a-7c91-419c-9bae-48544e0cb70a, invocation_timestamp=2019-03-12T16:20:24.820Z, session_id=5f034c6a-7c91-419c-9bae-48544e0cb70a, session_timestamp=2019-03-12T16:20:24.820Z}
[INFO ] 2019-03-12T16:20:24,971Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:20:25,046Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9190412887507533662). {}
[INFO ] 2019-03-12T16:20:25,073Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9190412887507533662). {invocation_id=dfb33078-933a-4683-930c-876c972358fc, invocation_timestamp=2019-03-12T16:20:25.072Z, session_id=dfb33078-933a-4683-930c-876c972358fc, session_timestamp=2019-03-12T16:20:25.072Z}
[INFO ] 2019-03-12T16:20:25,100Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:20:25,114Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6587807115928632525). {}
[INFO ] 2019-03-12T16:20:25,128Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6587807115928632525). {invocation_id=c6eee135-66b9-4959-8757-0278209ba570, invocation_timestamp=2019-03-12T16:20:25.127Z, session_id=c6eee135-66b9-4959-8757-0278209ba570, session_timestamp=2019-03-12T16:20:25.127Z}
[INFO ] 2019-03-12T16:20:25,140Z [Mock node 1 thread] flow.[5a1cc7cc-4928-446e-965b-647211116f17].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:20:25,153Z [Mock node 1 thread] flow.[91c8d82b-b070-411f-9ec3-098c7bc53254].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:20:25,185Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:20:25,177Z [Mock node 2 thread] flow.[83fd02de-9df5-400a-97f1-4aebd446f45b].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:20:25,212Z [Mock node 2 thread] flow.[83fd02de-9df5-400a-97f1-4aebd446f45b].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:20:25,221Z [Mock node 2 thread] flow.[83fd02de-9df5-400a-97f1-4aebd446f45b].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3138056528564505783). {}
[INFO ] 2019-03-12T16:20:25,231Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3138056528564505783). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=7f4f1d16-d428-4529-934b-6b2900e3672e, invocation_timestamp=2019-03-12T16:20:25.230Z, session_id=7f4f1d16-d428-4529-934b-6b2900e3672e, session_timestamp=2019-03-12T16:20:25.230Z}
[INFO ] 2019-03-12T16:20:25,246Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:21:15,800Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a400a7b3-7c71-4c2d-b079-cdbd6192c376.jar {}
[INFO ] 2019-03-12T16:21:15,831Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-443346ce-355e-41bd-9f39-70a133f82af6.jar {}
[INFO ] 2019-03-12T16:21:15,877Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a400a7b3-7c71-4c2d-b079-cdbd6192c376.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-443346ce-355e-41bd-9f39-70a133f82af6.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:21:15,908Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:15,911Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:15,924Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a400a7b3-7c71-4c2d-b079-cdbd6192c376.jar {}
[INFO ] 2019-03-12T16:21:15,959Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-443346ce-355e-41bd-9f39-70a133f82af6.jar {}
[INFO ] 2019-03-12T16:21:16,092Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:21:16,728Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:16,777Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:16,780Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:18,789Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:19,295Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:19,298Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,309Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:19,409Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,411Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,564Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:19,571Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:19,659Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:21:19,777Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:19,785Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:19,832Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F2107347B85DC6DD038F6B2DC5D1B1B4C6775C6DBB4496C8EE9BEDF5AD6588FA, not inserting the second time {}
[INFO ] 2019-03-12T16:21:19,896Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,918Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:19,920Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,922Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,923Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:19,925Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:19,931Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:19,933Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:19,952Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:21:19,961Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T16:21:19,971Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:19,973Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:19,975Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:20,094Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:20,103Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:20,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,111Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,117Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,118Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,176Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:20,178Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:20,187Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:20,189Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:20,201Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 01DFB5C4081957998A17B8471CC553D02BCE04EA6E1C3C258CBE15BB2C534A5A, not inserting the second time {}
[INFO ] 2019-03-12T16:21:20,211Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:20,214Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,227Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:20,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,232Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,245Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,252Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:20,255Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,257Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,258Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:20,259Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,262Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:20,263Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:20,283Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:21:20,292Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T16:21:20,302Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:20,305Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:20,306Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:20,397Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:20,408Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:20,410Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,415Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,422Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,424Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,484Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:20,486Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:20,495Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:20,497Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:20,506Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 43CC84ADB4877476C83827F8A21224DF3700BCEAB752C37C1316D36BD921F128, not inserting the second time {}
[INFO ] 2019-03-12T16:21:20,515Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:20,518Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407679297) {}
[INFO ] 2019-03-12T16:21:20,531Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,533Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,542Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,543Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,545Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,554Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407680106) {}
[INFO ] 2019-03-12T16:21:20,556Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,558Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:20,566Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,567Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,571Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:20,573Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,574Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,575Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:20,576Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407680410) {}
[INFO ] 2019-03-12T16:21:20,984Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].call - Started sending message hey {}
[INFO ] 2019-03-12T16:21:21,164Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:21:21,230Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4492121983302166178). {}
[INFO ] 2019-03-12T16:21:21,294Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].call - Started sending message hey {}
[INFO ] 2019-03-12T16:21:21,323Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:21:21,330Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=259644099482623800). {}
[INFO ] 2019-03-12T16:21:21,317Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4492121983302166178). {invocation_id=9e72c7f5-6c89-43f8-ba15-169f179b7248, invocation_timestamp=2019-03-12T16:21:21.309Z, session_id=9e72c7f5-6c89-43f8-ba15-169f179b7248, session_timestamp=2019-03-12T16:21:21.309Z}
[INFO ] 2019-03-12T16:21:21,381Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=259644099482623800). {invocation_id=f451aaff-479f-4167-acca-8fae1ebad8e9, invocation_timestamp=2019-03-12T16:21:21.380Z, session_id=f451aaff-479f-4167-acca-8fae1ebad8e9, session_timestamp=2019-03-12T16:21:21.380Z}
[INFO ] 2019-03-12T16:21:21,484Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:21:21,543Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5575026308428637703). {}
[INFO ] 2019-03-12T16:21:21,562Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5575026308428637703). {invocation_id=9c4cd334-6e0c-48f8-8c33-7d48a306e5ae, invocation_timestamp=2019-03-12T16:21:21.561Z, session_id=9c4cd334-6e0c-48f8-8c33-7d48a306e5ae, session_timestamp=2019-03-12T16:21:21.561Z}
[INFO ] 2019-03-12T16:21:21,570Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:21:21,582Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2871780070719353994). {}
[INFO ] 2019-03-12T16:21:21,592Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2871780070719353994). {invocation_id=f3653fea-4396-470c-b6b9-9700500f81c3, invocation_timestamp=2019-03-12T16:21:21.591Z, session_id=f3653fea-4396-470c-b6b9-9700500f81c3, session_timestamp=2019-03-12T16:21:21.591Z}
[INFO ] 2019-03-12T16:21:21,599Z [Mock node 1 thread] flow.[082f462c-c24c-42f9-8a8f-b0ce04a7b5e4].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:21:21,611Z [Mock node 1 thread] flow.[da62a118-dd63-474e-a333-9acc46ec989d].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:21:21,628Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:21:21,623Z [Mock node 2 thread] flow.[c6087d73-00d9-45cd-b99c-e16d63eaabe1].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:21:21,649Z [Mock node 2 thread] flow.[c6087d73-00d9-45cd-b99c-e16d63eaabe1].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:21:21,655Z [Mock node 2 thread] flow.[c6087d73-00d9-45cd-b99c-e16d63eaabe1].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9044533282772537411). {}
[INFO ] 2019-03-12T16:21:21,666Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-9044533282772537411). {actor_id=Only For Testing, actor_owningIdentity=O=PartyA, L=Berlin, C=DE, actor_store_id=TEST, invocation_id=165e1a3a-30f8-448c-90da-f52f1c96ac1f, invocation_timestamp=2019-03-12T16:21:21.664Z, session_id=165e1a3a-30f8-448c-90da-f52f1c96ac1f, session_timestamp=2019-03-12T16:21:21.664Z}
[INFO ] 2019-03-12T16:21:21,683Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:21:21,744Z [Mock node 2 thread] flow.[c6087d73-00d9-45cd-b99c-e16d63eaabe1].call - Suspending to finalise I got your message Thanks {}
[INFO ] 2019-03-12T16:21:21,752Z [Mock node 2 thread] flow.[c6087d73-00d9-45cd-b99c-e16d63eaabe1].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1973032693843901111). {}
[INFO ] 2019-03-12T16:21:53,663Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-d56bcd50-19b9-422e-a167-089c4f586a54.jar {}
[INFO ] 2019-03-12T16:21:53,693Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-4f164497-51be-4fb3-b453-240820899a1a.jar {}
[INFO ] 2019-03-12T16:21:53,738Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d56bcd50-19b9-422e-a167-089c4f586a54.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-4f164497-51be-4fb3-b453-240820899a1a.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:21:53,769Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:53,773Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:53,787Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d56bcd50-19b9-422e-a167-089c4f586a54.jar {}
[INFO ] 2019-03-12T16:21:53,818Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-4f164497-51be-4fb3-b453-240820899a1a.jar {}
[INFO ] 2019-03-12T16:21:53,966Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-03-12T16:21:54,577Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:54,618Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:54,622Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:56,430Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:21:56,963Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:56,965Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:56,975Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:57,113Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,116Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,282Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:57,289Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:57,370Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:21:57,492Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:57,503Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:57,549Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 44E85485953BBBEC5FF91E279BDF3719908F40DAA68494430002DD38ED00F0CE, not inserting the second time {}
[INFO ] 2019-03-12T16:21:57,611Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,632Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:57,635Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,637Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,639Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:57,640Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,645Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:57,647Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:57,664Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:21:57,672Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@379ddfda {}
[INFO ] 2019-03-12T16:21:57,683Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:57,685Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:57,686Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:57,806Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:57,815Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:57,816Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,822Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:57,827Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,828Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,888Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:57,890Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:57,899Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:57,900Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:57,912Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C1514599DB38921E80451C11F421673B9D56EBE9DE365591E915A4719165123F, not inserting the second time {}
[INFO ] 2019-03-12T16:21:57,922Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,926Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:57,939Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:57,940Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,943Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:57,956Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,958Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,964Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:57,965Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,968Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,969Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:57,971Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:57,974Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:21:57,976Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:21:57,997Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:21:58,007Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7edad7d2 {}
[INFO ] 2019-03-12T16:21:58,018Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:21:58,020Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:58,021Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:58,106Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:21:58,243Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:21:58,245Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,249Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:58,255Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,256Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,310Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment B1E2BFE1CA9F447CDBCA502FE4653DB81AB7ADE0766BF5612F9E41BFC521C29E {}
[WARN ] 2019-03-12T16:21:58,312Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:21:58,323Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:21:58,325Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:21:58,334Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A70BF763D6700A8AC8D2AFC33EB4A8958577636F51C27E9FFB2D320F41235434, not inserting the second time {}
[INFO ] 2019-03-12T16:21:58,343Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:58,345Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:58,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552407716965) {}
[INFO ] 2019-03-12T16:21:58,360Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,362Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:58,374Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,376Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:58,378Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:58,389Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552407717816) {}
[INFO ] 2019-03-12T16:21:58,390Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,392Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:21:58,400Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,402Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,406Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:58,407Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,408Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,409Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:21:58,411Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552407718244) {}
[INFO ] 2019-03-12T16:21:58,804Z [Mock node 1 thread] flow.[3437dbbb-c9b8-4267-9dad-bbedcd51d918].call - Started sending message hey {}
[INFO ] 2019-03-12T16:21:58,849Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:21:58,848Z [Mock node 2 thread] flow.[339b3da5-ed49-4252-873a-ee2c1529e434].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:21:58,896Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:21:59,016Z [Mock node 1 thread] flow.[3437dbbb-c9b8-4267-9dad-bbedcd51d918].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:21:59,016Z [Mock node 2 thread] flow.[339b3da5-ed49-4252-873a-ee2c1529e434].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:21:59,099Z [Mock node 1 thread] flow.[3437dbbb-c9b8-4267-9dad-bbedcd51d918].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5696038022608353513). {}
[INFO ] 2019-03-12T16:21:59,099Z [Mock node 2 thread] flow.[339b3da5-ed49-4252-873a-ee2c1529e434].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2743533183021090911). {}
[INFO ] 2019-03-12T16:21:59,184Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-2743533183021090911). {invocation_id=5be0cd42-def6-4e6b-b294-5fd274ff289d, invocation_timestamp=2019-03-12T16:21:59.176Z, session_id=5be0cd42-def6-4e6b-b294-5fd274ff289d, session_timestamp=2019-03-12T16:21:59.176Z}
[INFO ] 2019-03-12T16:21:59,184Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5696038022608353513). {invocation_id=5e4fa9eb-3f7a-45d9-bf2a-204c1ee21856, invocation_timestamp=2019-03-12T16:21:59.177Z, session_id=5e4fa9eb-3f7a-45d9-bf2a-204c1ee21856, session_timestamp=2019-03-12T16:21:59.177Z}
[WARN ] 2019-03-12T16:21:59,219Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-2743533183021090911), initiationEntropy=-1884060213635212701, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=5be0cd42-def6-4e6b-b294-5fd274ff289d, invocation_timestamp=2019-03-12T16:21:59.176Z, session_id=5be0cd42-def6-4e6b-b294-5fd274ff289d, session_timestamp=2019-03-12T16:21:59.176Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@78abb583 rejected from java.util.concurrent.ThreadPoolExecutor@4e7bd353[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:26:44,234Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a9a23dd5-ebf4-4335-9c04-6d3e82d316bc.jar {}
[INFO ] 2019-03-12T16:26:44,264Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-d51c4f0b-9163-48d2-9552-d6ff229b61e4.jar {}
[INFO ] 2019-03-12T16:26:44,310Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a9a23dd5-ebf4-4335-9c04-6d3e82d316bc.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d51c4f0b-9163-48d2-9552-d6ff229b61e4.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:26:44,342Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:26:44,345Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:26:44,358Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a9a23dd5-ebf4-4335-9c04-6d3e82d316bc.jar {}
[INFO ] 2019-03-12T16:26:44,389Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d51c4f0b-9163-48d2-9552-d6ff229b61e4.jar {}
[INFO ] 2019-03-12T16:26:44,501Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T16:26:45,137Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:26:45,185Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:26:45,189Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:26:47,304Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:26:47,906Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:26:47,910Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:47,932Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:48,169Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,172Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,453Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 1DF7B358C49264F114658E72FB1811D82E7F19DB0E61D0F92AD20442C4521F84 {}
[WARN ] 2019-03-12T16:26:48,474Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:26:48,622Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:26:48,747Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:26:48,757Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:26:48,803Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C8ECC7FF33FD8F743D7E8ED0C8D6CAA2283290C55353A36F83DFE94F9337113E, not inserting the second time {}
[INFO ] 2019-03-12T16:26:48,879Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,911Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:48,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,915Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,917Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:48,920Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:48,928Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:26:48,929Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:26:48,952Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:26:48,963Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T16:26:48,975Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:26:48,977Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:48,979Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:49,117Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:49,131Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:26:49,133Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,141Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,150Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,152Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,221Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 1DF7B358C49264F114658E72FB1811D82E7F19DB0E61D0F92AD20442C4521F84 {}
[WARN ] 2019-03-12T16:26:49,224Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:26:49,238Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:26:49,240Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:26:49,256Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BB288F2730807B6BABA38A76FF3241DD44A51B58DE47B0C150638CDD5C61F351, not inserting the second time {}
[INFO ] 2019-03-12T16:26:49,266Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:49,273Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,288Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:49,290Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,294Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,309Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,312Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,321Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:49,323Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,328Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:49,330Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,334Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:26:49,337Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:26:49,358Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:26:49,367Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T16:26:49,380Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:26:49,382Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:49,385Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:49,501Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:26:49,509Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:26:49,510Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,515Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,520Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,521Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,579Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 1DF7B358C49264F114658E72FB1811D82E7F19DB0E61D0F92AD20442C4521F84 {}
[WARN ] 2019-03-12T16:26:49,581Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:26:49,591Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:26:49,593Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:26:49,605Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6EE9CFAB919FEA0E5200DE9DE334593F264A7AD6FE61D91EE72983478B47DF51, not inserting the second time {}
[INFO ] 2019-03-12T16:26:49,613Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:49,618Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,629Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408007910) {}
[INFO ] 2019-03-12T16:26:49,631Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,635Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,647Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,651Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,660Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408009133) {}
[INFO ] 2019-03-12T16:26:49,661Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,663Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:26:49,671Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,672Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,677Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:49,678Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:49,680Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:26:49,681Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408009510) {}
[INFO ] 2019-03-12T16:26:50,130Z [Mock node 1 thread] flow.[4121bd42-0a31-429e-9cf5-a7aeb55b9795].call - Started sending message hey {}
[INFO ] 2019-03-12T16:26:50,188Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:26:50,188Z [Mock node 2 thread] flow.[849931f9-d31e-44fd-bc6b-1dfbbad4c119].call - Started sending message I got your message Thanks {}
[INFO ] 2019-03-12T16:26:50,232Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:26:50,364Z [Mock node 2 thread] flow.[849931f9-d31e-44fd-bc6b-1dfbbad4c119].collectSignature - Suspending to collect signatures I got your message Thanks {}
[INFO ] 2019-03-12T16:26:50,364Z [Mock node 1 thread] flow.[4121bd42-0a31-429e-9cf5-a7aeb55b9795].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:26:50,465Z [Mock node 2 thread] flow.[849931f9-d31e-44fd-bc6b-1dfbbad4c119].initiateSession - Initiating flow session with party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3917093446774159943). {}
[INFO ] 2019-03-12T16:26:50,465Z [Mock node 1 thread] flow.[4121bd42-0a31-429e-9cf5-a7aeb55b9795].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1186050688105834454). {}
[INFO ] 2019-03-12T16:26:50,580Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-1186050688105834454). {invocation_id=7f141547-1991-490a-9b76-6a05e875c672, invocation_timestamp=2019-03-12T16:26:50.578Z, session_id=7f141547-1991-490a-9b76-6a05e875c672, session_timestamp=2019-03-12T16:26:50.578Z}
[INFO ] 2019-03-12T16:26:50,578Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=3917093446774159943). {invocation_id=42c414f2-d298-434d-93a0-32872c73dd60, invocation_timestamp=2019-03-12T16:26:50.564Z, session_id=42c414f2-d298-434d-93a0-32872c73dd60, session_timestamp=2019-03-12T16:26:50.564Z}
[WARN ] 2019-03-12T16:26:50,635Z [Mock node 1 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=3917093446774159943), initiationEntropy=6126965653684955976, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=42c414f2-d298-434d-93a0-32872c73dd60, invocation_timestamp=2019-03-12T16:26:50.564Z, session_id=42c414f2-d298-434d-93a0-32872c73dd60, session_timestamp=2019-03-12T16:26:50.564Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@5e9876eb rejected from java.util.concurrent.ThreadPoolExecutor@4415c89a[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:31:23,714Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-6008ff14-453a-4a0a-b6ce-2be33eafbc3d.jar {}
[INFO ] 2019-03-12T16:31:23,742Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-ecb23d06-4e8e-49ce-a1e1-c438613912f5.jar {}
[INFO ] 2019-03-12T16:31:23,791Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6008ff14-453a-4a0a-b6ce-2be33eafbc3d.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ecb23d06-4e8e-49ce-a1e1-c438613912f5.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:31:23,824Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:31:23,828Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:31:23,841Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-6008ff14-453a-4a0a-b6ce-2be33eafbc3d.jar {}
[INFO ] 2019-03-12T16:31:23,871Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-ecb23d06-4e8e-49ce-a1e1-c438613912f5.jar {}
[INFO ] 2019-03-12T16:31:23,992Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@554a2f3 {}
[INFO ] 2019-03-12T16:31:24,585Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:31:24,628Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:31:24,631Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:31:26,582Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:31:27,089Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:31:27,092Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,102Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:27,193Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,194Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,342Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:31:27,350Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:31:27,438Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:31:27,558Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:31:27,567Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:31:27,612Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CF5CB70F7B9C91F5CC40BA7CABAE8EE4C6B91847C294DF4626D76F4D91BC4870, not inserting the second time {}
[INFO ] 2019-03-12T16:31:27,680Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,703Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:27,704Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,706Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,708Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:27,710Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:27,716Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:31:27,718Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:31:27,738Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:31:27,750Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6aa34b05 {}
[INFO ] 2019-03-12T16:31:27,763Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:31:27,766Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:27,768Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:27,894Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:27,904Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:31:27,906Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:27,911Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:27,916Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:27,917Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:27,973Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:31:27,976Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:31:27,985Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:31:27,986Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:31:27,999Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AF7D934009D5290BB199487BA2C4E67AB090DB5B509427312A0DBF72677AAFCC, not inserting the second time {}
[INFO ] 2019-03-12T16:31:28,009Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:28,012Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,024Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:28,025Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,029Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,042Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,043Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,049Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:28,051Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,053Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,054Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:28,057Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,061Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:31:28,063Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:31:28,081Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:31:28,090Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@165348d0 {}
[INFO ] 2019-03-12T16:31:28,100Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:31:28,102Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:28,103Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:28,195Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:31:28,206Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:31:28,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,212Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,218Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,219Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,281Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:31:28,283Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:31:28,294Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:31:28,295Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:31:28,304Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7F821CF8586ECF9993E234E2D08C483DCF70254723BA5601177F752D073AC81B, not inserting the second time {}
[INFO ] 2019-03-12T16:31:28,312Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:28,315Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,323Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408287092) {}
[INFO ] 2019-03-12T16:31:28,325Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,327Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,335Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,336Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,339Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,348Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408287906) {}
[INFO ] 2019-03-12T16:31:28,350Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,352Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:31:28,362Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,363Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,367Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:28,368Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,369Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,370Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:31:28,371Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408288207) {}
[INFO ] 2019-03-12T16:31:28,777Z [Mock node 1 thread] flow.[10a5803f-ca2f-44fc-80c6-f604a2a5078e].call - Started sending message hey {}
[INFO ] 2019-03-12T16:31:28,778Z [pool-22-thread-1] flow.[29e15761-e90a-4d08-abec-52347637f504].call - Started sending message I got your message Thanks {}
[WARN ] 2019-03-12T16:31:28,787Z [Mock node 2 thread] flow.[29e15761-e90a-4d08-abec-52347637f504].run - Terminated by unexpected exception {}
kotlin.KotlinNullPointerException: null
	at asyncFlowInvocation.flow.SendNewMessageFlowV2.call(SendNewMessageFlowV2.kt:42) ~[classes/:?]
	at asyncFlowInvocation.flow.SendNewMessageFlowV2.call(SendNewMessageFlowV2.kt:15) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:31:28,984Z [Mock node 1 thread] flow.[10a5803f-ca2f-44fc-80c6-f604a2a5078e].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:31:29,082Z [Mock node 1 thread] flow.[10a5803f-ca2f-44fc-80c6-f604a2a5078e].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5840101308842471757). {}
[INFO ] 2019-03-12T16:31:29,161Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5840101308842471757). {invocation_id=94126217-b759-41c7-85c8-b0390e89a135, invocation_timestamp=2019-03-12T16:31:29.151Z, session_id=94126217-b759-41c7-85c8-b0390e89a135, session_timestamp=2019-03-12T16:31:29.151Z}
[WARN ] 2019-03-12T16:31:29,201Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=5840101308842471757), initiationEntropy=1306492222444747668, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=94126217-b759-41c7-85c8-b0390e89a135, invocation_timestamp=2019-03-12T16:31:29.151Z, session_id=94126217-b759-41c7-85c8-b0390e89a135, session_timestamp=2019-03-12T16:31:29.151Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@40c7839e rejected from java.util.concurrent.ThreadPoolExecutor@2913ef01[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:32:55,932Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-d844a1e8-1457-48b4-aaff-8aa107d43d80.jar {}
[INFO ] 2019-03-12T16:32:55,963Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-7c20ac02-7de6-4b06-af8b-ced837b46039.jar {}
[INFO ] 2019-03-12T16:32:56,010Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d844a1e8-1457-48b4-aaff-8aa107d43d80.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7c20ac02-7de6-4b06-af8b-ced837b46039.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:32:56,041Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:32:56,045Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:32:56,059Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-d844a1e8-1457-48b4-aaff-8aa107d43d80.jar {}
[INFO ] 2019-03-12T16:32:56,090Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-7c20ac02-7de6-4b06-af8b-ced837b46039.jar {}
[INFO ] 2019-03-12T16:32:56,233Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@60655642 {}
[INFO ] 2019-03-12T16:32:56,849Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:32:56,898Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:32:56,901Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:32:58,810Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:32:59,320Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:32:59,322Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:32:59,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:32:59,427Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:32:59,429Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:32:59,590Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:32:59,596Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:32:59,692Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:32:59,848Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:32:59,859Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:32:59,908Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3409C4ABE0313DC9DAAF7C54BC2B98FB88C6C1C4E50C3BF4842EC70120E8652C, not inserting the second time {}
[INFO ] 2019-03-12T16:32:59,982Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,010Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,012Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,014Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,016Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,018Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,026Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:33:00,027Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:33:00,050Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:33:00,063Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7bca7b6c {}
[INFO ] 2019-03-12T16:33:00,078Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:33:00,080Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,082Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,202Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,211Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:33:00,213Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,217Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,224Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,225Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,286Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:33:00,330Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:33:00,349Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:33:00,351Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:33:00,368Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5B9513132EFBB80CD6B565C4D3183F142001E56C4BECE7550F31A688DA40581C, not inserting the second time {}
[INFO ] 2019-03-12T16:33:00,379Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,382Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,394Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,405Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,409Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,418Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,419Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,425Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,427Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,429Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,430Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,432Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,435Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:33:00,436Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:33:00,453Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:33:00,461Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@486cb71f {}
[INFO ] 2019-03-12T16:33:00,469Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:33:00,471Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,472Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,695Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:33:00,703Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:33:00,704Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,708Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,713Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,715Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,768Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:33:00,770Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:33:00,778Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:33:00,780Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:33:00,788Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 28F48CE1CBA74D9826C327484574A4F18A32AC0E21C27615E5FA3B02A1A39633, not inserting the second time {}
[INFO ] 2019-03-12T16:33:00,795Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,798Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,806Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408379322) {}
[INFO ] 2019-03-12T16:33:00,809Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,811Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,820Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,821Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,823Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,832Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408380213) {}
[INFO ] 2019-03-12T16:33:00,833Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,835Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:33:00,844Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,850Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,851Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:00,853Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:33:00,854Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408380704) {}
[INFO ] 2019-03-12T16:33:01,243Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].call - Started sending message hey {}
[INFO ] 2019-03-12T16:33:01,417Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:33:01,478Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=584864343809987844). {}
[INFO ] 2019-03-12T16:33:01,544Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].call - Started sending message hey {}
[INFO ] 2019-03-12T16:33:01,578Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:33:01,590Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4885803550915551084). {}
[INFO ] 2019-03-12T16:33:01,565Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=584864343809987844). {invocation_id=27656595-b417-437a-810e-4cd7bf845f77, invocation_timestamp=2019-03-12T16:33:01.556Z, session_id=27656595-b417-437a-810e-4cd7bf845f77, session_timestamp=2019-03-12T16:33:01.556Z}
[INFO ] 2019-03-12T16:33:01,618Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=4885803550915551084). {invocation_id=4a221973-8342-4413-81e6-4763d8b4d850, invocation_timestamp=2019-03-12T16:33:01.617Z, session_id=4a221973-8342-4413-81e6-4763d8b4d850, session_timestamp=2019-03-12T16:33:01.617Z}
[INFO ] 2019-03-12T16:33:01,738Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:33:01,802Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3152764110164411395). {}
[INFO ] 2019-03-12T16:33:01,820Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-3152764110164411395). {invocation_id=62500367-91bf-4720-a1fe-8b29a09ba7de, invocation_timestamp=2019-03-12T16:33:01.819Z, session_id=62500367-91bf-4720-a1fe-8b29a09ba7de, session_timestamp=2019-03-12T16:33:01.819Z}
[INFO ] 2019-03-12T16:33:01,832Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:33:01,840Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=30310459794430286). {}
[INFO ] 2019-03-12T16:33:01,853Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=30310459794430286). {invocation_id=25ea7b3f-c806-45e8-b6aa-40be41cc660b, invocation_timestamp=2019-03-12T16:33:01.852Z, session_id=25ea7b3f-c806-45e8-b6aa-40be41cc660b, session_timestamp=2019-03-12T16:33:01.852Z}
[INFO ] 2019-03-12T16:33:01,860Z [Mock node 1 thread] flow.[f0667eda-5dac-4954-b724-5b4c3f511a7f].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:33:01,879Z [pool-23-thread-1] flow.[7290b24d-d08d-4b91-bcca-3897163e3083].call - Started sending message Please reply ASAP {}
[WARN ] 2019-03-12T16:33:01,879Z [Mock node 1 thread] flow.[7290b24d-d08d-4b91-bcca-3897163e3083].run - Terminated by unexpected exception {}
kotlin.KotlinNullPointerException: null
	at asyncFlowInvocation.flow.SendNewMessageFlowV2.call(SendNewMessageFlowV2.kt:42) ~[classes/:?]
	at asyncFlowInvocation.flow.SendNewMessageFlowV2.call(SendNewMessageFlowV2.kt:15) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:33:01,902Z [Mock node 1 thread] flow.[d78d524b-0a0d-4616-8d15-06d251784151].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:33:01,905Z [pool-23-thread-1] flow.[7290b24d-d08d-4b91-bcca-3897163e3083].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T16:33:01,910Z [pool-23-thread-1] flow.[7290b24d-d08d-4b91-bcca-3897163e3083].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8774662831915868690). {}
[INFO ] 2019-03-12T16:33:57,930Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-490aff78-9373-4ada-8e12-2c52c35e4101.jar {}
[INFO ] 2019-03-12T16:33:57,959Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-a5d0c1db-55f6-464b-9bfd-39ca2556ed6e.jar {}
[INFO ] 2019-03-12T16:33:58,011Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-490aff78-9373-4ada-8e12-2c52c35e4101.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a5d0c1db-55f6-464b-9bfd-39ca2556ed6e.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:33:58,053Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:33:58,057Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:33:58,071Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-490aff78-9373-4ada-8e12-2c52c35e4101.jar {}
[INFO ] 2019-03-12T16:33:58,102Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-a5d0c1db-55f6-464b-9bfd-39ca2556ed6e.jar {}
[INFO ] 2019-03-12T16:33:58,235Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-03-12T16:33:58,860Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:33:58,899Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:33:58,902Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:34:00,875Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:34:01,387Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:34:01,389Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,399Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:01,495Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,497Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,644Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:34:01,650Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:34:01,734Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:34:01,847Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:34:01,856Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:34:01,904Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 28BA2414B004948C95FE3567DED7876C33E976CE810889C598759B3DE880E073, not inserting the second time {}
[INFO ] 2019-03-12T16:34:01,965Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,987Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:01,989Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,990Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,992Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:01,993Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:01,998Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:34:01,999Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:34:02,016Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:34:02,025Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@71c31fdd {}
[INFO ] 2019-03-12T16:34:02,036Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:34:02,038Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,039Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,173Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,183Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:34:02,186Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,191Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,197Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,198Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,251Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:34:02,253Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:34:02,262Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:34:02,264Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:34:02,275Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 55E63A40E9106ABAA38D4DA930D74F897B6C67342B6A26581217BF2AE659C403, not inserting the second time {}
[INFO ] 2019-03-12T16:34:02,283Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:02,287Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,296Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:02,298Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,300Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,310Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,312Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,317Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:02,318Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,320Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,321Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:02,322Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,324Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:34:02,326Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:34:02,341Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:34:02,353Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1f8825a {}
[INFO ] 2019-03-12T16:34:02,364Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:34:02,366Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,368Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,470Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:34:02,480Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:34:02,482Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,488Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,493Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,494Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,548Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:34:02,550Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:34:02,558Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:34:02,560Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:34:02,569Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 96CBEA4714E0154C026961953DA3B619CB43ED54EA5A0661615275EA2FE642C0, not inserting the second time {}
[INFO ] 2019-03-12T16:34:02,578Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:02,581Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,594Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408441389) {}
[INFO ] 2019-03-12T16:34:02,595Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,597Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,609Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,611Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,613Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,625Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408442186) {}
[INFO ] 2019-03-12T16:34:02,627Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,629Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:34:02,641Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,643Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,647Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:02,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,650Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:02,652Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:34:02,653Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408442482) {}
[INFO ] 2019-03-12T16:34:03,048Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].call - Started sending message hey {}
[INFO ] 2019-03-12T16:34:03,247Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:34:03,311Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=9101891056430009752). {}
[INFO ] 2019-03-12T16:34:03,374Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].call - Started sending message hey {}
[INFO ] 2019-03-12T16:34:03,405Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:34:03,410Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-589227558720687136). {}
[INFO ] 2019-03-12T16:34:03,398Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=9101891056430009752). {invocation_id=88fbe999-2097-4f41-8b59-df6efc31954c, invocation_timestamp=2019-03-12T16:34:03.391Z, session_id=88fbe999-2097-4f41-8b59-df6efc31954c, session_timestamp=2019-03-12T16:34:03.391Z}
[INFO ] 2019-03-12T16:34:03,458Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-589227558720687136). {invocation_id=76ae6512-caea-4581-b877-3742cdbceb90, invocation_timestamp=2019-03-12T16:34:03.457Z, session_id=76ae6512-caea-4581-b877-3742cdbceb90, session_timestamp=2019-03-12T16:34:03.457Z}
[INFO ] 2019-03-12T16:34:03,568Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:34:03,619Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7551742436642216242). {}
[INFO ] 2019-03-12T16:34:03,638Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-7551742436642216242). {invocation_id=6f68e1c8-9847-4a0d-93fa-be82e36df2ed, invocation_timestamp=2019-03-12T16:34:03.637Z, session_id=6f68e1c8-9847-4a0d-93fa-be82e36df2ed, session_timestamp=2019-03-12T16:34:03.637Z}
[INFO ] 2019-03-12T16:34:03,646Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:34:03,657Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6813964525899984980). {}
[INFO ] 2019-03-12T16:34:03,666Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6813964525899984980). {invocation_id=ad668c4d-904e-485c-bdc1-0ccbad7754e2, invocation_timestamp=2019-03-12T16:34:03.665Z, session_id=ad668c4d-904e-485c-bdc1-0ccbad7754e2, session_timestamp=2019-03-12T16:34:03.665Z}
[INFO ] 2019-03-12T16:34:03,673Z [Mock node 1 thread] flow.[a8ab0cfe-061f-4d8d-9b3f-6d2983d54e08].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:34:03,681Z [Mock node 1 thread] flow.[5baebe70-91c2-42d4-8fce-6fe274afb54c].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:34:03,686Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:34:03,733Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:35:06,629Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-e9637c1d-aaa6-4893-817d-32ea114a1af2.jar {}
[INFO ] 2019-03-12T16:35:06,657Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-8fd91126-3e24-431a-9bc4-1338f4e020f1.jar {}
[INFO ] 2019-03-12T16:35:06,708Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-e9637c1d-aaa6-4893-817d-32ea114a1af2.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8fd91126-3e24-431a-9bc4-1338f4e020f1.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:35:06,738Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:35:06,742Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:35:06,755Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-e9637c1d-aaa6-4893-817d-32ea114a1af2.jar {}
[INFO ] 2019-03-12T16:35:06,784Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8fd91126-3e24-431a-9bc4-1338f4e020f1.jar {}
[INFO ] 2019-03-12T16:35:06,927Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3f7a7ce6 {}
[INFO ] 2019-03-12T16:35:07,554Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:35:07,604Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:35:07,608Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:35:09,677Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:35:10,218Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:35:10,223Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,236Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:10,341Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,344Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,497Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:35:10,504Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:35:10,591Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:35:10,708Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:35:10,718Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:35:10,762Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F728ACFA7A1E42B6B186FE9EFE23EF2CAEE533D1524E906C23813BBD4BE9643F, not inserting the second time {}
[INFO ] 2019-03-12T16:35:10,825Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,847Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:10,849Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,851Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,852Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:10,854Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:10,859Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:35:10,861Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:35:10,880Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:35:10,892Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@699e81db {}
[INFO ] 2019-03-12T16:35:10,903Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:35:10,905Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:10,907Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:11,026Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:11,035Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:35:11,036Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,041Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,047Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,048Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,103Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:35:11,105Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:35:11,113Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:35:11,115Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:35:11,127Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 003B5F8BE162EB2AF9589BB336486F09BCFDEEAE8969B174748FBA6A0A819F19, not inserting the second time {}
[INFO ] 2019-03-12T16:35:11,136Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:11,140Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,151Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:11,153Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,156Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,168Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,170Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,177Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:11,178Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,180Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,181Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:11,183Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,186Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:35:11,188Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:35:11,208Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:35:11,217Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a146acb {}
[INFO ] 2019-03-12T16:35:11,228Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:35:11,230Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:11,231Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:11,318Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:35:11,328Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:35:11,330Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,334Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,340Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,343Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,403Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 2E05AAC5AE4BEB33111A037DA13307198BDAF0BB1D88A3232494872C799860CC {}
[WARN ] 2019-03-12T16:35:11,405Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:35:11,414Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:35:11,415Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:35:11,424Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key CC7362464E92F691F2FFDEF8D5C27F1E1D6A2DE9656399D79DDB16BD03CE98E0, not inserting the second time {}
[INFO ] 2019-03-12T16:35:11,434Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:11,437Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,447Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552408510222) {}
[INFO ] 2019-03-12T16:35:11,449Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,451Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,459Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,461Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,463Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,472Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552408511036) {}
[INFO ] 2019-03-12T16:35:11,473Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,475Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:35:11,484Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,489Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:11,490Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,491Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,492Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:35:11,493Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552408511330) {}
[INFO ] 2019-03-12T16:35:11,905Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].call - Started sending message hey {}
[INFO ] 2019-03-12T16:35:12,084Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:35:12,147Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7841587324301348863). {}
[INFO ] 2019-03-12T16:35:12,213Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].call - Started sending message hey {}
[INFO ] 2019-03-12T16:35:12,246Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:35:12,251Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5744991517755974791). {}
[INFO ] 2019-03-12T16:35:12,236Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7841587324301348863). {invocation_id=0d94ecb0-8496-49fa-a67c-04db9337f456, invocation_timestamp=2019-03-12T16:35:12.227Z, session_id=0d94ecb0-8496-49fa-a67c-04db9337f456, session_timestamp=2019-03-12T16:35:12.227Z}
[INFO ] 2019-03-12T16:35:12,297Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-5744991517755974791). {invocation_id=6223102b-d1a5-49d8-bb57-d5753939dd28, invocation_timestamp=2019-03-12T16:35:12.296Z, session_id=6223102b-d1a5-49d8-bb57-d5753939dd28, session_timestamp=2019-03-12T16:35:12.296Z}
[INFO ] 2019-03-12T16:35:12,404Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:35:12,454Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2079937461459432348). {}
[INFO ] 2019-03-12T16:35:12,471Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=2079937461459432348). {invocation_id=95feb776-99fd-4788-8446-225672b2f7d6, invocation_timestamp=2019-03-12T16:35:12.470Z, session_id=95feb776-99fd-4788-8446-225672b2f7d6, session_timestamp=2019-03-12T16:35:12.470Z}
[INFO ] 2019-03-12T16:35:12,478Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:35:12,488Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1164776116895249344). {}
[INFO ] 2019-03-12T16:35:12,499Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=1164776116895249344). {invocation_id=ec240dd2-eedf-4505-bc89-01c46f519063, invocation_timestamp=2019-03-12T16:35:12.498Z, session_id=ec240dd2-eedf-4505-bc89-01c46f519063, session_timestamp=2019-03-12T16:35:12.498Z}
[INFO ] 2019-03-12T16:35:12,505Z [Mock node 1 thread] flow.[709e9232-0366-4830-b16a-43c3550f1266].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:35:12,521Z [Mock node 1 thread] flow.[fc44fa3c-4822-4109-9cbd-4addfc12200c].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:35:12,528Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:35:12,526Z [Mock node 1 thread] flow.[a07ab54e-c4d5-44d1-8642-fa1984de9633].call - Started sending message Please reply ASAP {}
[INFO ] 2019-03-12T16:35:12,549Z [Mock node 1 thread] flow.[a07ab54e-c4d5-44d1-8642-fa1984de9633].collectSignature - Suspending to collect signatures Please reply ASAP {}
[INFO ] 2019-03-12T16:35:12,554Z [Mock node 1 thread] flow.[a07ab54e-c4d5-44d1-8642-fa1984de9633].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8361391383561976588). {}
[INFO ] 2019-03-12T16:35:12,561Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=8361391383561976588). {invocation_id=e3b0b4b3-c52e-42af-ad9b-a976cef9b192, invocation_timestamp=2019-03-12T16:35:12.560Z, session_id=e3b0b4b3-c52e-42af-ad9b-a976cef9b192, session_timestamp=2019-03-12T16:35:12.560Z}
[INFO ] 2019-03-12T16:35:12,579Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:35:12,603Z [Mock node 1 thread] flow.[a07ab54e-c4d5-44d1-8642-fa1984de9633].call - Suspending to finalise Please reply ASAP {}
[INFO ] 2019-03-12T16:35:12,611Z [Mock node 1 thread] flow.[a07ab54e-c4d5-44d1-8642-fa1984de9633].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4359252455702230900). {}
[INFO ] 2019-03-12T16:35:12,623Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4359252455702230900). {invocation_id=ab495891-b89e-4ab2-8e71-833ead9beaec, invocation_timestamp=2019-03-12T16:35:12.622Z, session_id=ab495891-b89e-4ab2-8e71-833ead9beaec, session_timestamp=2019-03-12T16:35:12.622Z}
[WARN ] 2019-03-12T16:35:12,647Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4359252455702230900), initiationEntropy=8562430760644000891, initiatorFlowClassName=net.corda.core.flows.FinalityFlow, appName=corda-core-3.3-corda, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=ab495891-b89e-4ab2-8e71-833ead9beaec, invocation_timestamp=2019-03-12T16:35:12.622Z, session_id=ab495891-b89e-4ab2-8e71-833ead9beaec, session_timestamp=2019-03-12T16:35:12.622Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@6f26512 rejected from java.util.concurrent.ThreadPoolExecutor@db95dca[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 19]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T16:47:52,506Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-69c2712e-5d52-4512-9f4d-aa8df993a35b.jar {}
[INFO ] 2019-03-12T16:47:52,536Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-200de626-c1a9-4a8d-8707-7ac93f0ae905.jar {}
[INFO ] 2019-03-12T16:47:52,588Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-69c2712e-5d52-4512-9f4d-aa8df993a35b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-200de626-c1a9-4a8d-8707-7ac93f0ae905.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T16:47:52,618Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:47:52,623Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:47:52,636Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-69c2712e-5d52-4512-9f4d-aa8df993a35b.jar {}
[INFO ] 2019-03-12T16:47:52,666Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-200de626-c1a9-4a8d-8707-7ac93f0ae905.jar {}
[WARN ] 2019-03-12T16:47:52,700Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[WARN ] 2019-03-12T16:47:52,704Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[INFO ] 2019-03-12T16:47:52,795Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T16:47:53,432Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:47:53,474Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:47:53,480Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:47:55,445Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T16:47:55,966Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:47:55,969Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:55,980Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:56,073Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,076Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,228Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 24F3432016A2BCFB9CF21E10FAC898152A0C5A0BC2B062D8AC420B34557A9595 {}
[WARN ] 2019-03-12T16:47:56,233Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:47:56,322Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T16:47:56,439Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:47:56,446Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:47:56,490Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A80F37C0EE44DBB927CF77232C6D5A9A4B671139B95F2891D429913478100B1F, not inserting the second time {}
[INFO ] 2019-03-12T16:47:56,555Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,574Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:56,575Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,577Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,579Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:56,580Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,586Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:47:56,588Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:47:56,605Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:47:56,615Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T16:47:56,626Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:47:56,628Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:56,630Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:56,752Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:56,762Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:47:56,763Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,768Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:56,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,775Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,831Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 24F3432016A2BCFB9CF21E10FAC898152A0C5A0BC2B062D8AC420B34557A9595 {}
[WARN ] 2019-03-12T16:47:56,833Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:47:56,843Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:47:56,845Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:47:56,856Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B509721D9F7F4BA165EA1EAEE53A80D3D9FF10901B994DA5EEAAD2E21208E6DD, not inserting the second time {}
[INFO ] 2019-03-12T16:47:56,864Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,868Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:56,881Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:56,882Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,886Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:56,897Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,899Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,907Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:56,909Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,911Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,913Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:56,914Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:56,918Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T16:47:56,920Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T16:47:56,937Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T16:47:56,946Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T16:47:56,957Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T16:47:56,959Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:56,960Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:57,049Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T16:47:57,056Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T16:47:57,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,062Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:57,068Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,069Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,128Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 24F3432016A2BCFB9CF21E10FAC898152A0C5A0BC2B062D8AC420B34557A9595 {}
[WARN ] 2019-03-12T16:47:57,130Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T16:47:57,141Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T16:47:57,143Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T16:47:57,153Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 825CB0B4F8FE31645C41228807407AD9FD172ECC39DA86AE42C276EDC725E80A, not inserting the second time {}
[INFO ] 2019-03-12T16:47:57,162Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:57,165Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:57,177Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552409275968) {}
[INFO ] 2019-03-12T16:47:57,179Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,181Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:57,191Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,192Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:57,194Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:57,204Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552409276763) {}
[INFO ] 2019-03-12T16:47:57,205Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,209Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T16:47:57,218Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,219Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,223Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:57,224Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,227Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T16:47:57,228Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552409277058) {}
[INFO ] 2019-03-12T16:47:57,642Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].call - Started sending message hey {}
[INFO ] 2019-03-12T16:47:57,827Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:47:57,888Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4242728422362242498). {}
[INFO ] 2019-03-12T16:47:57,957Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].call - Started sending message hey {}
[INFO ] 2019-03-12T16:47:57,988Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T16:47:57,994Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6617429600668680420). {}
[INFO ] 2019-03-12T16:47:57,977Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-4242728422362242498). {invocation_id=8eb1032f-7244-49ca-bc8e-92f324be9ef0, invocation_timestamp=2019-03-12T16:47:57.970Z, session_id=8eb1032f-7244-49ca-bc8e-92f324be9ef0, session_timestamp=2019-03-12T16:47:57.970Z}
[INFO ] 2019-03-12T16:47:58,036Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-6617429600668680420). {invocation_id=7c8bc961-7906-4e6b-bf5f-752c619154fc, invocation_timestamp=2019-03-12T16:47:58.035Z, session_id=7c8bc961-7906-4e6b-bf5f-752c619154fc, session_timestamp=2019-03-12T16:47:58.035Z}
[INFO ] 2019-03-12T16:47:58,145Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:47:58,197Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5824294837234269468). {}
[INFO ] 2019-03-12T16:47:58,216Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=5824294837234269468). {invocation_id=945c4691-ab38-4bef-bfc9-9f539d3eb1c2, invocation_timestamp=2019-03-12T16:47:58.215Z, session_id=945c4691-ab38-4bef-bfc9-9f539d3eb1c2, session_timestamp=2019-03-12T16:47:58.215Z}
[INFO ] 2019-03-12T16:47:58,228Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].call - Suspending to finalise hey {}
[INFO ] 2019-03-12T16:47:58,240Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=590435223018354044). {}
[INFO ] 2019-03-12T16:47:58,250Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=590435223018354044). {invocation_id=03330298-7f7c-476a-b765-54d66a77c3e5, invocation_timestamp=2019-03-12T16:47:58.249Z, session_id=03330298-7f7c-476a-b765-54d66a77c3e5, session_timestamp=2019-03-12T16:47:58.249Z}
[INFO ] 2019-03-12T16:47:58,258Z [Mock node 1 thread] flow.[485fb32a-5e1f-4019-b167-e7baa0c15f05].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:47:58,271Z [Mock node 1 thread] flow.[24d2a640-3d38-46ca-b997-0dac596c00b3].call - Finished sending message hey {}
[INFO ] 2019-03-12T16:47:58,281Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T16:47:58,325Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T17:17:26,127Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-8b4206d3-1d8c-400d-9a78-23b4536c8f43.jar {}
[INFO ] 2019-03-12T17:17:26,156Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-107ebfbb-fa70-44c4-b360-b3818949e6ef.jar {}
[INFO ] 2019-03-12T17:17:26,204Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8b4206d3-1d8c-400d-9a78-23b4536c8f43.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-107ebfbb-fa70-44c4-b360-b3818949e6ef.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T17:17:26,234Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:17:26,238Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:17:26,250Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-8b4206d3-1d8c-400d-9a78-23b4536c8f43.jar {}
[INFO ] 2019-03-12T17:17:26,284Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-107ebfbb-fa70-44c4-b360-b3818949e6ef.jar {}
[WARN ] 2019-03-12T17:17:26,320Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[WARN ] 2019-03-12T17:17:26,324Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[INFO ] 2019-03-12T17:17:26,424Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T17:17:27,051Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:17:27,095Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:17:27,101Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:17:29,112Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:17:29,627Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:17:29,630Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:29,640Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:29,735Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:29,737Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:29,885Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:17:29,892Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:17:29,982Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T17:17:30,101Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:17:30,110Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:17:30,151Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E4641020A97C4E6A6D007C7C8FDA36CA3F83972EE551FEA3511F1F243239E35F, not inserting the second time {}
[INFO ] 2019-03-12T17:17:30,216Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,237Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,239Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,241Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,243Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,245Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,251Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:17:30,253Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:17:30,269Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:17:30,279Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7e6c990f {}
[INFO ] 2019-03-12T17:17:30,290Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:17:30,292Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,294Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,417Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,444Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:17:30,447Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,453Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,459Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,461Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,521Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:17:30,525Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:17:30,537Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:17:30,538Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:17:30,550Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F5F1FB7550C4757D36AAE2E5FEFF0F1DC6F9C3AD929680EDA84FE2B2224A3DEC, not inserting the second time {}
[INFO ] 2019-03-12T17:17:30,559Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,563Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,573Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,576Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,579Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,590Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,593Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,598Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,600Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,602Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,604Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,605Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,608Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:17:30,611Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:17:30,628Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:17:30,637Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7c33252c {}
[INFO ] 2019-03-12T17:17:30,646Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:17:30,648Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,649Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,740Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:17:30,751Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:17:30,752Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,756Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,762Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,764Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,821Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:17:30,824Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:17:30,834Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:17:30,835Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:17:30,845Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1C40191F8B9693E4CAEC79DD1D649C5D5704D88C7358E19F00C5C11F0051F40D, not inserting the second time {}
[INFO ] 2019-03-12T17:17:30,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,856Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,867Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411049629) {}
[INFO ] 2019-03-12T17:17:30,868Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,871Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,881Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,882Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,884Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,894Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411050447) {}
[INFO ] 2019-03-12T17:17:30,896Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,897Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:17:30,907Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,909Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,914Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,915Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:17:30,918Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:17:30,919Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411050752) {}
[INFO ] 2019-03-12T17:18:10,755Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-c0e07661-cc46-4310-8c63-21e5b4b8679c.jar {}
[INFO ] 2019-03-12T17:18:10,788Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-085a868d-21b0-4dcc-8f27-aebc82fe0150.jar {}
[INFO ] 2019-03-12T17:18:10,837Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-c0e07661-cc46-4310-8c63-21e5b4b8679c.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-085a868d-21b0-4dcc-8f27-aebc82fe0150.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T17:18:10,867Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:18:10,871Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:18:10,885Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-c0e07661-cc46-4310-8c63-21e5b4b8679c.jar {}
[INFO ] 2019-03-12T17:18:10,916Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-085a868d-21b0-4dcc-8f27-aebc82fe0150.jar {}
[WARN ] 2019-03-12T17:18:10,949Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[WARN ] 2019-03-12T17:18:10,952Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[INFO ] 2019-03-12T17:18:11,089Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@247d44b4 {}
[INFO ] 2019-03-12T17:18:11,760Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:18:11,804Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:18:11,811Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:18:13,850Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:18:14,368Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:18:14,370Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:14,380Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:14,474Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:14,477Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:14,629Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:18:14,636Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:18:14,728Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T17:18:14,853Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:18:14,861Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:18:14,910Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 26C0EFAA3E9B2B84DB5928B1BBDE0E398C1730B715B6613834B127A9330B8764, not inserting the second time {}
[INFO ] 2019-03-12T17:18:14,979Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:14,999Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,001Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,003Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,005Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,007Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,012Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:18:15,014Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:18:15,033Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:18:15,046Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619f491 {}
[INFO ] 2019-03-12T17:18:15,057Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:18:15,060Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,062Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,189Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,197Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:18:15,199Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,204Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,208Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,210Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,267Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:18:15,269Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:18:15,283Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:18:15,286Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:18:15,296Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 664AEA96F998E09472116D2C4251D89B443425642C5D4C2164A2141651C6D295, not inserting the second time {}
[INFO ] 2019-03-12T17:18:15,305Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,310Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,322Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,323Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,327Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,346Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,353Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,354Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,358Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,361Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,366Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:18:15,367Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:18:15,390Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:18:15,399Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@25370af5 {}
[INFO ] 2019-03-12T17:18:15,409Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:18:15,410Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,411Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,509Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:18:15,521Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:18:15,523Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,530Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,537Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,539Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,595Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 06D85D0DDE851035B778C05F0872F037156FD0C3CE520EFE9ADF5AF1F09AD93E {}
[WARN ] 2019-03-12T17:18:15,597Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:18:15,605Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:18:15,607Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:18:15,617Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 40815283544B871F72C03E51CC8E225EECF3359C36DBC5CCD0F1B7166CA513F2, not inserting the second time {}
[INFO ] 2019-03-12T17:18:15,623Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,626Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,636Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411094370) {}
[INFO ] 2019-03-12T17:18:15,637Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,640Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,651Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,653Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,656Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,664Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411095199) {}
[INFO ] 2019-03-12T17:18:15,666Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,668Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:18:15,678Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,679Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,684Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,687Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:15,688Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:18:15,689Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411095523) {}
[INFO ] 2019-03-12T17:18:16,106Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].call - Started sending message How is it going? {}
[INFO ] 2019-03-12T17:18:16,293Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].collectSignature - Suspending to collect signatures How is it going? {}
[INFO ] 2019-03-12T17:18:16,359Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7353310798110185976). {}
[INFO ] 2019-03-12T17:18:16,478Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7353310798110185976). {invocation_id=7b3c27f5-8c89-4faf-a8fb-c1b4d64ba4c5, invocation_timestamp=2019-03-12T17:18:16.466Z, session_id=7b3c27f5-8c89-4faf-a8fb-c1b4d64ba4c5, session_timestamp=2019-03-12T17:18:16.466Z}
[INFO ] 2019-03-12T17:18:16,610Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].call - Suspending to finalise How is it going? {}
[INFO ] 2019-03-12T17:18:16,659Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8162314753556201715). {}
[INFO ] 2019-03-12T17:18:16,679Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=-8162314753556201715). {invocation_id=3d1765eb-86eb-47d9-88bc-11810b833053, invocation_timestamp=2019-03-12T17:18:16.678Z, session_id=3d1765eb-86eb-47d9-88bc-11810b833053, session_timestamp=2019-03-12T17:18:16.678Z}
[INFO ] 2019-03-12T17:18:16,700Z [Mock node 1 thread] flow.[a0ae1a6d-bdb2-4290-a4db-4909b4e519c5].call - Finished sending message How is it going? {}
[INFO ] 2019-03-12T17:18:16,713Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T17:18:16,758Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class asyncFlowInvocation.State.MessageState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-03-12T17:21:32,279Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/test/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-2a525701-7c63-462e-bf98-a7fb73f9a53b.jar {}
[INFO ] 2019-03-12T17:21:32,307Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package asyncFlowInvocation in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/out/production/classes/asyncFlowInvocation: build/tmp/generated-test-cordapps/asyncFlowInvocation-c98d2e88-376a-4235-9521-fbd0d1b471d7.jar {}
[INFO ] 2019-03-12T17:21:32,358Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-2a525701-7c63-462e-bf98-a7fb73f9a53b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-c98d2e88-376a-4235-9521-fbd0d1b471d7.jar, rootPackageName=null) {}
[INFO ] 2019-03-12T17:21:32,389Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:21:32,393Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:21:32,406Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-2a525701-7c63-462e-bf98-a7fb73f9a53b.jar {}
[INFO ] 2019-03-12T17:21:32,435Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/IdeaProjects/asyncFlowInvocation/cordapp/build/tmp/generated-test-cordapps/asyncFlowInvocation-c98d2e88-376a-4235-9521-fbd0d1b471d7.jar {}
[WARN ] 2019-03-12T17:21:32,467Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[WARN ] 2019-03-12T17:21:32,471Z [main] cordapp.CordappLoader.loadClass - As asyncFlowInvocation.services.MessageService must be a sub-type of net.corda.core.flows.FlowLogic {}
[INFO ] 2019-03-12T17:21:32,573Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3f7a7ce6 {}
[INFO ] 2019-03-12T17:21:33,329Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:21:33,380Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:21:33,385Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:21:35,418Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-03-12T17:21:35,936Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:21:35,938Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:35,949Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:36,047Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,049Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,207Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment F463E5706AB2EEFBD03A76E09ED8B1401E98FEDE4A911A19DEE8E1CA15540D6A {}
[WARN ] 2019-03-12T17:21:36,214Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:21:36,306Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-03-12T17:21:36,429Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:21:36,438Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:21:36,480Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9BA6DD81823D3A8BB3CBAA5C13CA969E8214B1ADF5070E8417A35F000C0DB65B, not inserting the second time {}
[INFO ] 2019-03-12T17:21:36,545Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,564Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:36,566Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,567Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,569Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:36,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,577Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:21:36,579Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:21:36,597Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:21:36,608Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@699e81db {}
[INFO ] 2019-03-12T17:21:36,620Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:21:36,622Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:36,624Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:36,751Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:36,761Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:21:36,763Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,768Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:36,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,774Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,833Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment F463E5706AB2EEFBD03A76E09ED8B1401E98FEDE4A911A19DEE8E1CA15540D6A {}
[WARN ] 2019-03-12T17:21:36,835Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:21:36,845Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:21:36,848Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:21:36,859Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A2074B61817B23C9B390D1ABDED9DD898FE6158AD084FDF68DB8F845A081D237, not inserting the second time {}
[INFO ] 2019-03-12T17:21:36,868Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,872Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:36,885Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:36,887Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,889Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:36,902Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,904Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,911Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:36,913Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,915Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,917Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:36,918Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:36,922Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-03-12T17:21:36,923Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-03-12T17:21:36,941Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-03-12T17:21:36,951Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a146acb {}
[INFO ] 2019-03-12T17:21:36,961Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-03-12T17:21:36,963Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:36,964Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:37,055Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-03-12T17:21:37,065Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-03-12T17:21:37,067Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,073Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:37,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,079Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,143Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment F463E5706AB2EEFBD03A76E09ED8B1401E98FEDE4A911A19DEE8E1CA15540D6A {}
[WARN ] 2019-03-12T17:21:37,145Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-03-12T17:21:37,155Z [main] internal.InternalMockNetwork$MockNode.installCordaService - Installed asyncFlowInvocation.services.MessageService Corda service {}
[INFO ] 2019-03-12T17:21:37,157Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered asyncFlowInvocation.flow.SendMessageFlow to initiate asyncFlowInvocation.flow.SendMessageResponder (version 1) {}
[WARN ] 2019-03-12T17:21:37,166Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key FE954FAB0815CB049699C09ED00847C0AB7EF5CF5DE70BE5F604D9B2FAF86835, not inserting the second time {}
[INFO ] 2019-03-12T17:21:37,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:37,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:37,186Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=1, serial=1552411295938) {}
[INFO ] 2019-03-12T17:21:37,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,189Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:37,197Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,198Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:37,200Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:37,209Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyA, L=Berlin, C=DE], platformVersion=1, serial=1552411296762) {}
[INFO ] 2019-03-12T17:21:37,210Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,212Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-03-12T17:21:37,221Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,222Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,227Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:37,228Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[INFO ] 2019-03-12T17:21:37,229Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-03-12T17:21:37,230Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=PartyB, L=Berlin, C=DE], platformVersion=1, serial=1552411297067) {}
[WARN ] 2019-03-12T17:21:37,643Z [Mock node 1 thread] flow.[8f7830b3-a1c3-4e70-ace5-0eb4eea4825a].run - Terminated by unexpected exception {}
kotlin.KotlinNullPointerException: null
	at asyncFlowInvocation.services.MessageService.replyAll(MessageService.kt:47) ~[classes/:?]
	at asyncFlowInvocation.flow.SendNewMessageFlow.call(SendNewMessageFlow.kt:17) ~[classes/:?]
	at asyncFlowInvocation.flow.SendNewMessageFlow.call(SendNewMessageFlow.kt:11) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-03-12T17:21:37,697Z [Mock node 1 thread] flow.[3ba5c0d7-2290-4400-a7ba-8f3c97e644fc].call - Started sending message hey {}
[INFO ] 2019-03-12T17:21:37,890Z [Mock node 1 thread] flow.[3ba5c0d7-2290-4400-a7ba-8f3c97e644fc].collectSignature - Suspending to collect signatures hey {}
[INFO ] 2019-03-12T17:21:37,965Z [Mock node 1 thread] flow.[3ba5c0d7-2290-4400-a7ba-8f3c97e644fc].initiateSession - Initiating flow session with party O=PartyB, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7105642158591327927). {}
[INFO ] 2019-03-12T17:21:38,029Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=PartyA, L=Berlin, C=DE. Session id for tracing purposes is SessionId(toLong=7105642158591327927). {invocation_id=19b2ce0e-2c34-4e1a-b169-08c8626aca2a, invocation_timestamp=2019-03-12T17:21:38.023Z, session_id=19b2ce0e-2c34-4e1a-b169-08c8626aca2a, session_timestamp=2019-03-12T17:21:38.023Z}
[WARN ] 2019-03-12T17:21:38,064Z [Mock node 2 thread] statemachine.StateMachineManagerImpl.onSessionInit - Couldn't start flow session from InitialSessionMessage(initiatorSessionId=SessionId(toLong=7105642158591327927), initiationEntropy=-4914917529884709143, initiatorFlowClassName=asyncFlowInvocation.flow.SendMessageFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes) {invocation_id=19b2ce0e-2c34-4e1a-b169-08c8626aca2a, invocation_timestamp=2019-03-12T17:21:38.023Z, session_id=19b2ce0e-2c34-4e1a-b169-08c8626aca2a, session_timestamp=2019-03-12T17:21:38.023Z}
java.util.concurrent.RejectedExecutionException: Task net.corda.node.services.statemachine.StateMachineManagerImpl$updateCheckpoint$2@6709a71c rejected from java.util.concurrent.ThreadPoolExecutor@36de1671[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) ~[?:1.8.0_201]
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.updateCheckpoint(StateMachineManagerImpl.kt:548) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionInit(StateMachineManagerImpl.kt:371) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.onSessionMessage(StateMachineManagerImpl.kt:284) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl.access$onSessionMessage(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:244) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.StateMachineManagerImpl$resumeRestoredFibers$2.invoke(StateMachineManagerImpl.kt:63) [corda-node-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:468) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1$1.invoke(InMemoryMessagingNetwork.kt:318) [corda-node-driver-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.inTopLevelTransaction(CordaPersistence.kt:152) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:138) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) [corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) [corda-node-api-3.3-corda.jar:?]
	at net.corda.testing.node.InMemoryMessagingNetwork$InMemoryMessaging$pumpReceiveInternal$1.run(InMemoryMessagingNetwork.kt:465) [corda-node-driver-3.3-corda.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
